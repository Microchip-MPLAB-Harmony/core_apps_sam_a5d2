{"0": {
    "doc": "License",
    "title": "License",
    "content": "IMPORTANT: READ CAREFULLY . MICROCHIP IS WILLING TO LICENSE THIS INTEGRATED SOFTWARE FRAMEWORK SOFTWARE AND ACCOMPANYING DOCUMENTATION OFFERED TO YOU ONLY ON THE CONDITION THAT YOU ACCEPT ALL OF THE FOLLOWING TERMS. TO ACCEPT THE TERMS OF THIS LICENSE, CLICK “I ACCEPT” AND PROCEED WITH THE DOWNLOAD OR INSTALL. IF YOU DO NOT ACCEPT THESE LICENSE TERMS, CLICK “I DO NOT ACCEPT,” AND DO NOT DOWNLOAD OR INSTALL THIS SOFTWARE. NON-EXCLUSIVE SOFTWARE LICENSE AGREEMENT FOR MICROCHIP MPLAB HARMONY INTEGRATED SOFTWARE FRAMEWORK . This Nonexclusive Software License Agreement (“Agreement”) is between you, your heirs, agents, successors and assigns (“Licensee”) and Microchip Technology Incorporated, a Delaware corporation, with a principal place of business at 2355 W. Chandler Blvd., Chandler, AZ 85224-6199, and its subsidiary, Microchip Technology (Barbados) II Incorporated (collectively, “Microchip”) for Microchip’s MPLAB Harmony Integrated Software Framework (“Software”) and accompanying documentation (“Documentation”). The Software and Documentation are licensed under this Agreement and not sold. U.S. copyright laws and international copyright treaties, and other intellectual property laws and treaties protect the Software and Documentation. Microchip reserves all rights not expressly granted to Licensee in this Agreement. | License and Sublicense Grant. (a) Definitions. As used this Agreement, the following terms shall have the meanings defined below: . (i) \"Licensee Products\" means Licensee products that use or incorporate Microchip Products. (ii) \"Microchip Product\" means Microchip 16-bit and 32-bit microcontrollers, digital signal controllers or other Microchip semiconductor products with PIC16 and PIC18 prefix and specifically excepting the CX870 and CY920, which are not covered under this Agreement, that use or implement the Software. (iii) \"Object Code\" means the Software computer programming code provided by Microchip that is in binary form (including related documentation, if any) and error corrections, improvements and updates to such code provided by Microchip in its sole discretion, if any. (iv) \"Source Code\" means the Software computer programming code provided by Microchip that may be printed out or displayed in human readable form (including related programmer comments and documentation, if any), and error corrections, improvements, updates, modifications and derivatives of such code developed by Microchip, Licensee or Third Party. (v) \"Third Party\" means Licensee's agents, representatives, consultants, clients, customers, or contract manufacturers. (vi) \"Third Party Products\" means Third Party products that use or incorporate Microchip Products. (b) Software License Grant. Subject to the terms of this Agreement, Microchip grants strictly to Licensee a personal, worldwide, non-exclusive, non-transferable limited license to use, modify (except as limited by Section 1(f) below), copy and distribute the Software only when the Software is embedded on a Microchip Product that is integrated into Licensee Product or Third Party Product pursuant to Section 2(d) below. Any portion of the Software (including derivatives or modifications thereof) may not be: . (i) embedded on a non-Microchip microcontroller or digital signal controller; (ii) distributed (in Source Code or Object Code), except as described in Section 2(d) below. (c) Documentation License Grant. Subject to all of the terms and conditions of this Agreement, Microchip grants strictly to Licensee a perpetual, worldwide, non-exclusive license to use the Documentation in support of Licensee’s use of the Software. (d) Sublicense Grants. Subject to terms of this Agreement, Licensee may grant a limited sublicense to a Third Party to use the Software as described below only if such Third Party expressly agrees to be bound by terms of confidentiality and limited use that are no broader in scope and duration than the confidentiality and limited use terms of this Agreement: . (i) Third Party may modify Source Code for Licensee, except as limited by Section 1(f) below. (ii) Third Party may program Software into Microchip Products for Licensee. (iii) Third Party may use Software to develop and/or manufacture Licensee Product. (iv) Third Party may use Software to develop and/or manufacture Third Party Products where either: (x) the sublicensed Software contains Source Code modified or otherwise optimized by Licensee for Third Party use; or (y) the sublicensed Software is programmed into Microchip Products by Licensee on behalf of such Third Party. (v) Third Party may use the Documentation in support of Third Party's authorized use of the Software in conformance with this Section 2(d). (e) Audit. Authorized representatives of Microchip shall have the right to reasonably inspect Licensee’s premises and to audit Licensee’s records and inventory of Licensee Products, whether located on Licensee’s premises or elsewhere at any time, announced or unannounced, and in its sole and absolute discretion, in order to ensure Licensee’s adherence to the terms of this Agreement. (f) License and Sublicense Limitation. This Section 1 does not grant Licensee or any Third Party the right to modify any dotstack™ Bluetooth® stack, profile, or iAP protocol included in the Software. | Third Party Requirements. Licensee acknowledges that it is Licensee’s responsibility to comply with any third party license terms or requirements applicable to the use of such third party software, specifications, systems, or tools, including but not limited to SEGGER Microcontroller GmbH &amp; Co. KG’s rights in the emWin software and certain libraries included herein. Microchip is not responsible and will not be held responsible in any manner for Licensee’s failure to comply with such applicable terms or requirements. | Open Source Components. Notwithstanding the license grants contained herein, Licensee acknowledges that certain components of the Software may be covered by so-called “open source” software licenses (“Open Source Components”). Open Source Components means any software licenses approved as open source licenses by the Open Source Initiative or any substantially similar licenses, including any license that, as a condition of distribution, requires Microchip to provide Licensee with certain notices and/or information related to such Open Source Components, or requires that the distributor make the software available in source code format. Microchip will use commercially reasonable efforts to identify such Open Source Components in a text file or “About Box” or in a file or files referenced thereby (and will include any associated license agreement, notices, and other related information therein), or the Open Source Components will contain or be accompanied by its own license agreement. To the extent required by the licenses covering Open Source Components, the terms of such licenses will apply in lieu of the terms of this Agreement, and Microchip hereby represents and warrants that the licenses granted to such Open Source Components will be no less broad than the license granted in Section 1(b). To the extent the terms of the licenses applicable to Open Source Components prohibit any of the restrictions in this Agreement with respect to such Open Source Components, such restrictions will not apply to such Open Source Components. | Licensee’s Obligations. (a) Licensee will ensure Third Party compliance with the terms of this Agreement. (b) Licensee will not: (i) engage in unauthorized use, modification, disclosure or distribution of Software or Documentation, or its derivatives; (ii) use all or any portion of the Software, Documentation, or its derivatives except in conjunction with Microchip Products; or (iii) reverse engineer (by disassembly, decompilation or otherwise) Software or any portion thereof; or (iv) copy or reproduce all or any portion of Software, except as specifically allowed by this Agreement or expressly permitted by applicable law notwithstanding the foregoing limitations. (c) Licensee must include Microchip’s copyright, trademark and other proprietary notices in all copies of the Software, Documentation, and its derivatives. Licensee may not remove or alter any Microchip copyright or other proprietary rights notice posted in any portion of the Software or Documentation. (d) Licensee will defend, indemnify and hold Microchip and its subsidiaries harmless from and against any and all claims, costs, damages, expenses (including reasonable attorney’s fees), liabilities, and losses, including without limitation product liability claims, directly or indirectly arising from or related to: (i) the use, modification, disclosure or distribution of the Software, Documentation or any intellectual property rights related thereto; (ii) the use, sale, and distribution of Licensee Products or Third Party Products, and (iii) breach of this Agreement. THE FOREGOING STATES THE SOLE AND EXCLUSIVE LIABILITY OF THE PARTIES FOR INTELLECTUAL PROPERTY RIGHTS INFRINGEMENT. | Confidentiality. (a) Licensee agrees that the Software (including but not limited to the Source Code, Object Code and library files) and its derivatives, Documentation and underlying inventions, algorithms, know-how and ideas relating to the Software and the Documentation are proprietary information belonging to Microchip and its licensors (“Proprietary Information”). Except as expressly and unambiguously allowed herein, Licensee will hold in confidence and not use or disclose any Proprietary Information and shall similarly bind its employees and Third Party(ies) in writing. Proprietary Information shall not include information that: (i) is in or enters the public domain without breach of this Agreement and through no fault of the receiving party; (ii) the receiving party was legally in possession of prior to receiving it; (iii) the receiving party can demonstrate was developed by it independently and without use of or reference to the disclosing party’s Proprietary Information; or (iv) the receiving party receives from a third party without restriction on disclosure. If Licensee is required to disclose Proprietary Information by law, court order, or government agency, such disclosure shall not be deemed a breach of this Agreement provided that Licensee gives Microchip prompt notice of such requirement in order to allow Microchip to object or limit such disclosure, Licensee cooperates with Microchip to protect Proprietary Information, and Licensee complies with any protective order in place and discloses only the information required by process of law. (b) Licensee agrees that the provisions of this Agreement regarding unauthorized use and nondisclosure of the Software, Documentation and related Proprietary Rights are necessary to protect the legitimate business interests of Microchip and its licensors and that monetary damages alone cannot adequately compensate Microchip or its licensors if such provisions are violated. Licensee, therefore, agrees that if Microchip alleges that Licensee or Third Party has breached or violated such provision then Microchip will have the right to petition for injunctive relief, without the requirement for the posting of a bond, in addition to all other remedies at law or in equity. | Ownership of Proprietary Rights. (a) Microchip and its licensors retain all right, title and interest in and to the Software and Documentation (“Proprietary Rights”) including, but not limited to: (i) patent, copyright, trade secret and other intellectual property rights in the Software, Documentation, and underlying technology; (ii) the Software as implemented in any device or system, all hardware and software implementations of the Software technology (expressly excluding Licensee and Third Party code developed and used in conformance with this Agreement solely to interface with the Software and Licensee Products and/or Third Party Products); and (iii) all modifications and derivative works thereof (by whomever produced). Further, modifications and derivative works shall be considered works made for hire with ownership vesting in Microchip on creation. To the extent such modifications and derivatives do not qualify as a “work for hire,” Licensee hereby irrevocably transfers, assigns and conveys the exclusive copyright thereof to Microchip, free and clear of any and all liens, claims or other encumbrances, to the fullest extent permitted by law. Licensee and Third Party use of such modifications and derivatives is limited to the license rights described in Section 1 above. (b) Licensee shall have no right to sell, assign or otherwise transfer all or any portion of the Software, Documentation or any related intellectual property rights except as expressly set forth in this Agreement. | Termination of Agreement. Without prejudice to any other rights, this Agreement terminates immediately, without notice by Microchip, upon a failure by License or Third Party to comply with any provision of this Agreement. Further, Microchip may also terminate this Agreement upon reasonable belief that Licensee or Third Party have failed to comply with this Agreement. Upon termination, Licensee and Third Party will immediately stop using the Software, Documentation, and derivatives thereof, and immediately destroy all such copies, remove Software from any of Licensee’s tangible media and from systems on which the Software exists, and stop using, disclosing, copying, or reproducing Software (even as may be permitted by this Agreement). Termination of this Agreement will not affect the right of any end user or consumer to use Licensee Products or Third Party Products provided that such products were purchased prior to the termination of this Agreement. | Dangerous Applications. The Software is not fault-tolerant and is not designed, manufactured, or intended for use in hazardous environments requiring failsafe performance (“Dangerous Applications”). Dangerous Applications include the operation of nuclear facilities, aircraft navigation, aircraft communication systems, air traffic control, direct life support machines, weapons systems, or any environment or system in which the failure of the Software could lead directly or indirectly to death, personal injury, or severe physical or environmental damage. Microchip specifically disclaims (a) any express or implied warranty of fitness for use of the Software in Dangerous Applications; and (b) any and all liability for loss, damages and claims resulting from the use of the Software in Dangerous Applications. | Warranties and Disclaimers. THE SOFTWARE AND DOCUMENTATION ARE PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE, NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. MICROCHIP AND ITS LICENSORS ASSUME NO RESPONSIBILITY FOR THE ACCURACY, RELIABILITY OR APPLICATION OF THE SOFTWARE OR DOCUMENTATION. MICROCHIP AND ITS LICENSORS DO NOT WARRANT THAT THE SOFTWARE WILL MEET REQUIREMENTS OF LICENSEE OR THIRD PARTY, BE UNINTERRUPTED OR ERROR-FREE. MICROCHIP AND ITS LICENSORS HAVE NO OBLIGATION TO CORRECT ANY DEFECTS IN THE SOFTWARE. LICENSEE AND THIRD PARTY ASSUME THE ENTIRE RISK ARISING OUT OF USE OR PERFORMANCE OF THE SOFTWARE AND DOCUMENTATION PROVIDED UNDER THIS AGREEMENT. | Limited Liability. IN NO EVENT SHALL MICROCHIP OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT, NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER LEGAL OR EQUITABLE THEORY FOR ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES INCLUDING BUT NOT LIMITED TO INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS. The aggregate and cumulative liability of Microchip and its licensors for damages hereunder will in no event exceed $1000 or the amount Licensee paid Microchip for the Software and Documentation, whichever is greater. Licensee acknowledges that the foregoing limitations are reasonable and an essential part of this Agreement. | General. (a) Governing Law, Venue and Waiver of Trial by Jury. THIS AGREEMENT SHALL BE GOVERNED BY AND CONSTRUED UNDER THE LAWS OF THE STATE OF ARIZONA AND THE UNITED STATES WITHOUT REGARD TO CONFLICTS OF LAWS PROVISIONS. Licensee agrees that any disputes arising out of or related to this Agreement, Software or Documentation shall be brought in the courts of State of Arizona. The parties agree to waive their rights to a jury trial in actions relating to this Agreement. (b) Attorneys’ Fees. If either Microchip or Licensee employs attorneys to enforce any rights arising out of or relating to this Agreement, the prevailing party shall be entitled to recover its reasonable attorneys’ fees, costs and other expenses. (c) Entire Agreement. This Agreement shall constitute the entire agreement between the parties with respect to the subject matter hereof. It shall not be modified except by a written agreement signed by an authorized representative of Microchip. (d) Severability. If any provision of this Agreement shall be held by a court of competent jurisdiction to be illegal, invalid or unenforceable, that provision shall be limited or eliminated to the minimum extent necessary so that this Agreement shall otherwise remain in full force and effect and enforceable. (e) Waiver. No waiver of any breach of any provision of this Agreement shall constitute a waiver of any prior, concurrent or subsequent breach of the same or any other provisions hereof, and no waiver shall be effective unless made in writing and signed by an authorized representative of the waiving party. (f) Export Regulation. Licensee agrees to comply with all export laws and restrictions and regulations of the Department of Commerce or other United States or foreign agency or authority. (g) Survival. The indemnities, obligations of confidentiality, and limitations on liability described herein, and any right of action for breach of this Agreement prior to termination shall survive any termination of this Agreement. (h) Assignment. Neither this Agreement nor any rights, licenses or obligations hereunder, may be assigned by Licensee without the prior written approval of Microchip except pursuant to a merger, sale of all assets of Licensee or other corporate reorganization, provided that assignee agrees in writing to be bound by the Agreement. (i) Restricted Rights. Use, duplication or disclosure by the United States Government is subject to restrictions set forth in subparagraphs (a) through (d) of the Commercial Computer-Restricted Rights clause of FAR 52.227-19 when applicable, or in subparagraph (c)(1)(ii) of the Rights in Technical Data and Computer Software clause at DFARS 252.227-7013, and in similar clauses in the NASA FAR Supplement. Contractor/manufacturer is Microchip Technology Inc., 2355 W. Chandler Blvd., Chandler, AZ 85225-6199. | . If Licensee has any questions about this Agreement, please write to Microchip Technology Inc., 2355 W. Chandler Blvd., Chandler, AZ 85224-6199 USA, ATTN: Marketing. Microchip MPLAB Harmony Integrated Software Framework. Copyright © 2015 Microchip Technology Inc. All rights reserved. License Rev. 11/2015 . Copyright © 2015 Qualcomm Atheros, Inc. All Rights Reserved. Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies. THE SOFTWARE IS PROVIDED “AS IS” AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/mplab_harmony_license.html",
    "relUrl": "/mplab_harmony_license.html"
  },"1": {
    "doc": "I2C driver asynchronous - I2C EEPROM",
    "title": "I2C driver asynchronous - I2C EEPROM",
    "content": "This example application shows how to use the I2C driver in asynchronous mode to perform operations on the EEPROM. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/i2c/async/i2c_eeprom/readme.html#i2c-driver-asynchronous---i2c-eeprom",
    "relUrl": "/apps/driver/i2c/async/i2c_eeprom/readme.html#i2c-driver-asynchronous---i2c-eeprom"
  },"2": {
    "doc": "I2C driver asynchronous - I2C EEPROM",
    "title": "Description",
    "content": "This example uses the I2C driver in asynchronous mode to communicate with the EEPROM to perform write and read operations in Bare-Metal environment. This application uses I2C driver to read and write data from an on-Board AT24MAC402 EEPROM device. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/i2c/async/i2c_eeprom/readme.html#description",
    "relUrl": "/apps/driver/i2c/async/i2c_eeprom/readme.html#description"
  },"3": {
    "doc": "I2C driver asynchronous - I2C EEPROM",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/driver/i2c/async/i2c_eeprom/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_a5d2_xult_freertos.X | MPLABX project for SAMA5D2 Xplained Ultra Evaluation Kit | . | sam_a5d2_xult_freertos_iar.IAR/i2c_eeprom_sam_a5d2_xult_freertos.eww/i2c_eeprom_sam_a5d2_xult_freertos.eww | IAR project for SAMA5D2 Xplained Ultra Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/i2c/async/i2c_eeprom/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/driver/i2c/async/i2c_eeprom/readme.html#downloading-and-building-the-application"
  },"4": {
    "doc": "I2C driver asynchronous - I2C EEPROM",
    "title": "Setting up AT91Bootstrap loader",
    "content": "To load the application binary onto the target device, we need to use at91bootstrap loader. Refer to the at91bootstrap loader documentation for details on how to configure, build and run bootstrap loader project and use it to bootstrap the application binaries. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/i2c/async/i2c_eeprom/readme.html#setting-up-at91bootstrap-loader",
    "relUrl": "/apps/driver/i2c/async/i2c_eeprom/readme.html#setting-up-at91bootstrap-loader"
  },"5": {
    "doc": "I2C driver asynchronous - I2C EEPROM",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_a5d2_xult_freertos.X sam_a5d2_xult_freertos_iar.IAR/i2c_eeprom_sam_a5d2_xult_freertos.eww/i2c_eeprom_sam_a5d2_xult_freertos.eww | SAMA5D2 Xplained Ultra Evaluation Kit | . |   |   | . Setting up SAMA5D2 Xplained Ultra Evaluation Kit . Addtional hardware required . | SD Card with FAT32 file system | . Setting up the SD Card . | Download harmony MPU bootstrap loader from this location | Copy the downloaded boot loader binary( boot.bin) onto the SD card | . Setting up the board . | SDMMC slot used for bootloading the application is SDMMC1 | Short jumper JP2 (DEBUG_DIS) | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/i2c/async/i2c_eeprom/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/driver/i2c/async/i2c_eeprom/readme.html#setting-up-the-hardware"
  },"6": {
    "doc": "I2C driver asynchronous - I2C EEPROM",
    "title": "Running the Application",
    "content": ". | Build the application using its IDE | Copy the output binary (named ‘harmony.bin’) onto the SD Card (Refer to the ‘Setting up hardware’ section above for setting up the SD card) | Insert the SD card into SDMMC slot on the board (Refer to the ‘Setting up hardware’ section for the correct SDMMC slot) | Reset the board to run the application | The LED is turned ON when the value read from the EEPROM matched with the written value | . Refer to the following table for LED name: . | Board | LED Name | . | SAMA5D2 Xplained Ultra Evaluation Kit | RGB_LED(Green) | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/i2c/async/i2c_eeprom/readme.html#running-the-application",
    "relUrl": "/apps/driver/i2c/async/i2c_eeprom/readme.html#running-the-application"
  },"7": {
    "doc": "I2C driver asynchronous - I2C EEPROM",
    "title": "I2C driver asynchronous - I2C EEPROM",
    "content": ". ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/i2c/async/i2c_eeprom/readme.html",
    "relUrl": "/apps/driver/i2c/async/i2c_eeprom/readme.html"
  },"8": {
    "doc": "I2C driver synchronous - I2C EEPROM",
    "title": "I2C driver synchronous - I2C EEPROM",
    "content": "This example application shows how to use the I2C driver in synchronous mode to perform operations on the EEPROM. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/i2c/sync/i2c_eeprom/readme.html#i2c-driver-synchronous---i2c-eeprom",
    "relUrl": "/apps/driver/i2c/sync/i2c_eeprom/readme.html#i2c-driver-synchronous---i2c-eeprom"
  },"9": {
    "doc": "I2C driver synchronous - I2C EEPROM",
    "title": "Description",
    "content": "This example uses the I2C driver in synchronous mode to communicate with the EEPROM to perform write and read operations in Bare-Metal environment. This application uses I2C driver to read and write data from an on-Board AT24MAC402 EEPROM device. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/i2c/sync/i2c_eeprom/readme.html#description",
    "relUrl": "/apps/driver/i2c/sync/i2c_eeprom/readme.html#description"
  },"10": {
    "doc": "I2C driver synchronous - I2C EEPROM",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/driver/i2c/sync/i2c_eeprom/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_a5d2_xult_freertos.X | MPLABX project for SAMA5D2 Xplained Ultra Evaluation Kit | . | sam_a5d2_xult_freertos_iar.IAR/i2c_eeprom_sam_a5d2_xult_freertos.eww/i2c_eeprom_sam_a5d2_xult_freertos.eww | IAR project for SAMA5D2 Xplained Ultra Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/i2c/sync/i2c_eeprom/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/driver/i2c/sync/i2c_eeprom/readme.html#downloading-and-building-the-application"
  },"11": {
    "doc": "I2C driver synchronous - I2C EEPROM",
    "title": "Setting up AT91Bootstrap loader",
    "content": "To load the application binary onto the target device, we need to use at91bootstrap loader. Refer to the at91bootstrap loader documentation for details on how to configure, build and run bootstrap loader project and use it to bootstrap the application binaries. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/i2c/sync/i2c_eeprom/readme.html#setting-up-at91bootstrap-loader",
    "relUrl": "/apps/driver/i2c/sync/i2c_eeprom/readme.html#setting-up-at91bootstrap-loader"
  },"12": {
    "doc": "I2C driver synchronous - I2C EEPROM",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_a5d2_xult_freertos.X sam_a5d2_xult_freertos_iar.IAR/i2c_eeprom_sam_a5d2_xult_freertos.eww/i2c_eeprom_sam_a5d2_xult_freertos.eww | SAMA5D2 Xplained Ultra Evaluation Kit | . |   |   | . Setting up SAMA5D2 Xplained Ultra Evaluation Kit . Addtional hardware required . | SD Card with FAT32 file system | . Setting up the SD Card . | Download harmony MPU bootstrap loader from this location | Copy the downloaded boot loader binary( boot.bin) onto the SD card | . Setting up the board . | SDMMC slot used for bootloading the application is SDMMC1 | Short jumper JP2 (DEBUG_DIS) | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/i2c/sync/i2c_eeprom/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/driver/i2c/sync/i2c_eeprom/readme.html#setting-up-the-hardware"
  },"13": {
    "doc": "I2C driver synchronous - I2C EEPROM",
    "title": "Running the Application",
    "content": ". | Build the application using its IDE | Copy the output binary (named ‘harmony.bin’) onto the SD Card (Refer to the ‘Setting up hardware’ section above for setting up the SD card) | Insert the SD card into SDMMC slot on the board (Refer to the ‘Setting up hardware’ section for the correct SDMMC slot) | Reset the board to run the application | The LED is turned ON when the value read from the EEPROM matched with the written value | . Refer to the following table for LED name: . | Board | LED Name | . | SAMA5D2 Xplained Ultra Evaluation Kit | RGB_LED(Green) | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/i2c/sync/i2c_eeprom/readme.html#running-the-application",
    "relUrl": "/apps/driver/i2c/sync/i2c_eeprom/readme.html#running-the-application"
  },"14": {
    "doc": "I2C driver synchronous - I2C EEPROM",
    "title": "I2C driver synchronous - I2C EEPROM",
    "content": ". ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/i2c/sync/i2c_eeprom/readme.html",
    "relUrl": "/apps/driver/i2c/sync/i2c_eeprom/readme.html"
  },"15": {
    "doc": "I2C EEPROM AT24 driver - EEPROM Read Write",
    "title": "I2C EEPROM AT24 driver - EEPROM Read Write",
    "content": "This example application shows how to use the AT24 driver to perform read and write operations on AT24 series of EEPROM. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/i2c_eeprom/at24/at24_eeprom_read_write/readme.html#i2c-eeprom-at24-driver---eeprom-read-write",
    "relUrl": "/apps/driver/i2c_eeprom/at24/at24_eeprom_read_write/readme.html#i2c-eeprom-at24-driver---eeprom-read-write"
  },"16": {
    "doc": "I2C EEPROM AT24 driver - EEPROM Read Write",
    "title": "Description",
    "content": ". | This example uses the AT24 driver to communicate with I2C based External AT24CM0 series EEPROMs to perform write and read operations in Bare-Metal/ RTOS environment. | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/i2c_eeprom/at24/at24_eeprom_read_write/readme.html#description",
    "relUrl": "/apps/driver/i2c_eeprom/at24/at24_eeprom_read_write/readme.html#description"
  },"17": {
    "doc": "I2C EEPROM AT24 driver - EEPROM Read Write",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/driver/i2c_eeprom/at24/at24_eeprom_read_write/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_a5d2_xult.X | MPLABX project for SAMA5D2 Xplained Ultra Evaluation Kit | . | sam_a5d2_xult_freertos.X | MPLABX project for SAMA5D2 Xplained Ultra Evaluation Kit | . | sam_a5d2_xult_freertos_iar.IAR/at24_eeprom_read_write_sam_a5d2_xult_freertos.eww/at24_eeprom_read_write_sam_a5d2_xult_freertos.eww | IAR project for SAMA5D2 Xplained Ultra Evaluation Kit | . | sam_a5d2_xult_iar.IAR/at24_eeprom_read_write_sam_a5d2_xult.eww/at24_eeprom_read_write_sam_a5d2_xult.eww | IAR project for SAMA5D2 Xplained Ultra Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/i2c_eeprom/at24/at24_eeprom_read_write/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/driver/i2c_eeprom/at24/at24_eeprom_read_write/readme.html#downloading-and-building-the-application"
  },"18": {
    "doc": "I2C EEPROM AT24 driver - EEPROM Read Write",
    "title": "Setting up AT91Bootstrap loader",
    "content": "To load the application binary onto the target device, we need to use at91bootstrap loader. Refer to the at91bootstrap loader documentation for details on how to configure, build and run bootstrap loader project and use it to bootstrap the application binaries. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/i2c_eeprom/at24/at24_eeprom_read_write/readme.html#setting-up-at91bootstrap-loader",
    "relUrl": "/apps/driver/i2c_eeprom/at24/at24_eeprom_read_write/readme.html#setting-up-at91bootstrap-loader"
  },"19": {
    "doc": "I2C EEPROM AT24 driver - EEPROM Read Write",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_a5d2_xult.X sam_a5d2_xult_freertos.X sam_a5d2_xult_freertos_iar.IAR/at24_eeprom_read_write_sam_a5d2_xult_freertos.eww/at24_eeprom_read_write_sam_a5d2_xult_freertos.eww sam_a5d2_xult_iar.IAR/at24_eeprom_read_write_sam_a5d2_xult.eww/at24_eeprom_read_write_sam_a5d2_xult.eww | SAMA5D2 Xplained Ultra Evaluation Kit | . |   |   | . Setting up SAMA5D2 Xplained Ultra Evaluation Kit . Addtional hardware required . | SD Card with FAT32 file system | One EEPROM 3 Click board | mikroBUS Xplained Pro board | . Setting up the SD Card . | Download harmony MPU bootstrap loader from this location | Copy the downloaded boot loader binary( boot.bin) onto the SD card | . Setting up the board . | Install the EEPROM 3 Click board on to the mikroBUS Xplained Pro board | Connect the mikroBUS Xplained Pro board to the EXT1 header | SDMMC slot used for bootloading the application is SDMMC1 | Short jumper JP2 (DEBUG_DIS) | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/i2c_eeprom/at24/at24_eeprom_read_write/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/driver/i2c_eeprom/at24/at24_eeprom_read_write/readme.html#setting-up-the-hardware"
  },"20": {
    "doc": "I2C EEPROM AT24 driver - EEPROM Read Write",
    "title": "Running the Application",
    "content": ". | Build the application using its IDE | Copy the output binary (named ‘harmony.bin’) onto the SD Card (Refer to the ‘Setting up hardware’ section above for setting up the SD card) | Insert the SD card into SDMMC slot on the board (Refer to the ‘Setting up hardware’ section for the correct SDMMC slot) | Reset the board to run the application | LED is turned ON when the data read from EEPROM matches with the written data | . Refer to the following table for LED name: . | Board | LED Name | . | SAMA5D2 Xplained Ultra Evaluation Kit | RGB_LED(Green) | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/i2c_eeprom/at24/at24_eeprom_read_write/readme.html#running-the-application",
    "relUrl": "/apps/driver/i2c_eeprom/at24/at24_eeprom_read_write/readme.html#running-the-application"
  },"21": {
    "doc": "I2C EEPROM AT24 driver - EEPROM Read Write",
    "title": "I2C EEPROM AT24 driver - EEPROM Read Write",
    "content": ". ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/i2c_eeprom/at24/at24_eeprom_read_write/readme.html",
    "relUrl": "/apps/driver/i2c_eeprom/at24/at24_eeprom_read_write/readme.html"
  },"22": {
    "doc": "Memory driver asynchronous -  MX25L QSPI and AT25DF SPI flash read write",
    "title": "Memory driver asynchronous -  MX25L QSPI and AT25DF SPI flash read write",
    "content": "This example application shows how to use the Memory driver in asynchronous mode to perform block operations on the MX25L QSPI flash and the AT25DF SPI flash media. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/memory/async/mx25l_at25df_read_write/readme.html#memory-driver-asynchronous----mx25l-qspi-and-at25df-spi-flash-read-write",
    "relUrl": "/apps/driver/memory/async/mx25l_at25df_read_write/readme.html#memory-driver-asynchronous----mx25l-qspi-and-at25df-spi-flash-read-write"
  },"23": {
    "doc": "Memory driver asynchronous -  MX25L QSPI and AT25DF SPI flash read write",
    "title": "Description",
    "content": "This application uses multi instances of the Memory driver to communicate with the AT25DF SPI flash and the MX25L QSPI flash memories in asynchronous mode of operation in both RTOS and Bare-Metal environment. It performs block Erase/Write/Read operations on both the media. The application consists of five tasks which are called through the SYS_Tasks() routine in Bare-Metal environment and though RTOS thread context in RTOS environment. DRV_MEMORY_0_Tasks() : Manages the state machine of the Memory driver instance 0. DRV_MEMORY_1_Tasks() : Manages the state machine of the Memory driver instance 1. APP_MX25L_Tasks() : Performs operations on the MX25L QSPI Flash memory. APP_AT25DF_Tasks() : Performs operations on the AT25DF SPI flash memory. APP_MONITOR_Tasks(): Monitors the state of above two Tasks. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/memory/async/mx25l_at25df_read_write/readme.html#description",
    "relUrl": "/apps/driver/memory/async/mx25l_at25df_read_write/readme.html#description"
  },"24": {
    "doc": "Memory driver asynchronous -  MX25L QSPI and AT25DF SPI flash read write",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/driver/memory/async/mx25l_at25df_read_write/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_a5d2_xult.X | MPLABX project for SAMA5D2 Xplained Ultra Evaluation Kit | . | sam_a5d2_xult_freertos.X | MPLABX project for SAMA5D2 Xplained Ultra Evaluation Kit | . | sam_a5d2_xult_freertos_iar.IAR/mx25l_at25df_read_write_sam_a5d2_xult_freertos.eww/mx25l_at25df_read_write_sam_a5d2_xult_freertos.eww | IAR project for SAMA5D2 Xplained Ultra Evaluation Kit | . | sam_a5d2_xult_iar.IAR/mx25l_at25df_read_write_sam_a5d2_xult.eww/mx25l_at25df_read_write_sam_a5d2_xult.eww | IAR project for SAMA5D2 Xplained Ultra Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/memory/async/mx25l_at25df_read_write/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/driver/memory/async/mx25l_at25df_read_write/readme.html#downloading-and-building-the-application"
  },"25": {
    "doc": "Memory driver asynchronous -  MX25L QSPI and AT25DF SPI flash read write",
    "title": "Setting up AT91Bootstrap loader",
    "content": "To load the application binary onto the target device, we need to use at91bootstrap loader. Refer to the at91bootstrap loader documentation for details on how to configure, build and run bootstrap loader project and use it to bootstrap the application binaries. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/memory/async/mx25l_at25df_read_write/readme.html#setting-up-at91bootstrap-loader",
    "relUrl": "/apps/driver/memory/async/mx25l_at25df_read_write/readme.html#setting-up-at91bootstrap-loader"
  },"26": {
    "doc": "Memory driver asynchronous -  MX25L QSPI and AT25DF SPI flash read write",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_a5d2_xult.X sam_a5d2_xult_freertos.X sam_a5d2_xult_freertos_iar.IAR/mx25l_at25df_read_write_sam_a5d2_xult_freertos.eww/mx25l_at25df_read_write_sam_a5d2_xult_freertos.eww sam_a5d2_xult_iar.IAR/mx25l_at25df_read_write_sam_a5d2_xult.eww/mx25l_at25df_read_write_sam_a5d2_xult.eww | SAMA5D2 Xplained Ultra Evaluation Kit | . |   |   | . Setting up SAMA5D2 Xplained Ultra Evaluation Kit . Addtional hardware required . | SD Card with FAT32 file system | . Setting up the SD Card . | Download harmony MPU bootstrap loader from this location | Copy the downloaded boot loader binary( boot.bin) onto the SD card | . Setting up the board . | SDMMC slot used for bootloading the application is SDMMC1 | Short jumper JP2 (DEBUG_DIS) | Connect the Debug USB port on the board to the computer using a micro USB cable | Make sure that the jumper JP9 is removed (jumper pins are not shorted) | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/memory/async/mx25l_at25df_read_write/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/driver/memory/async/mx25l_at25df_read_write/readme.html#setting-up-the-hardware"
  },"27": {
    "doc": "Memory driver asynchronous -  MX25L QSPI and AT25DF SPI flash read write",
    "title": "Running the Application",
    "content": ". | Build the application using its IDE | Copy the output binary (named ‘harmony.bin’) onto the SD Card (Refer to the ‘Setting up hardware’ section above for setting up the SD card) | Insert the SD card into SDMMC slot on the board (Refer to the ‘Setting up hardware’ section for the correct SDMMC slot) | Reset the board to run the application | LED is turned ON when the data read from each media matches with the data written in them | . Refer to the following table for LED name: . | Board | LED Name | . | SAMA5D2 Xplained Ultra Evaluation Kit | RGB_LED(Green) | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/memory/async/mx25l_at25df_read_write/readme.html#running-the-application",
    "relUrl": "/apps/driver/memory/async/mx25l_at25df_read_write/readme.html#running-the-application"
  },"28": {
    "doc": "Memory driver asynchronous -  MX25L QSPI and AT25DF SPI flash read write",
    "title": "Memory driver asynchronous -  MX25L QSPI and AT25DF SPI flash read write",
    "content": ". ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/memory/async/mx25l_at25df_read_write/readme.html",
    "relUrl": "/apps/driver/memory/async/mx25l_at25df_read_write/readme.html"
  },"29": {
    "doc": "Memory driver synchronous -  MX25L QSPI and AT25DF SPI flash read write",
    "title": "Memory driver synchronous -  MX25L QSPI and AT25DF SPI flash read write",
    "content": "This example application shows how to use the Memory driver in synchronous mode to perform block operations on the MX25L QSPI flash and the AT25DF SPI flash media. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/memory/sync/mx25l_at25df_read_write/readme.html#memory-driver-synchronous----mx25l-qspi-and-at25df-spi-flash-read-write",
    "relUrl": "/apps/driver/memory/sync/mx25l_at25df_read_write/readme.html#memory-driver-synchronous----mx25l-qspi-and-at25df-spi-flash-read-write"
  },"30": {
    "doc": "Memory driver synchronous -  MX25L QSPI and AT25DF SPI flash read write",
    "title": "Description",
    "content": "This application uses multi instances of the Memory driver to communicate with the MX25L QSPI flash and the AT25DF SPI Flash memories in synchronous mode of operation in RTOS Environment. It performs block Erase/Write/Read operations on both the media. The application consists of three tasks which are called in the RTOS thread context: . APP_MX25L_Tasks() : Performs operations on the MX25L QSPI Flash Memory. APP_AT25DF_Tasks() : Performs operations on the AT25DF Flash Memory. APP_MONITOR_Tasks(): Monitors the state of above two Tasks. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/memory/sync/mx25l_at25df_read_write/readme.html#description",
    "relUrl": "/apps/driver/memory/sync/mx25l_at25df_read_write/readme.html#description"
  },"31": {
    "doc": "Memory driver synchronous -  MX25L QSPI and AT25DF SPI flash read write",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/driver/memory/sync/mx25l_at25df_read_write/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_a5d2_xult_freertos.X | MPLABX project for SAMA5D2 Xplained Ultra Evaluation Kit | . | sam_a5d2_xult_freertos_iar.IAR/mx25l_at25df_read_write_sam_a5d2_xult_freertos.eww/mx25l_at25df_read_write_sam_a5d2_xult_freertos.eww | IAR project for SAMA5D2 Xplained Ultra Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/memory/sync/mx25l_at25df_read_write/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/driver/memory/sync/mx25l_at25df_read_write/readme.html#downloading-and-building-the-application"
  },"32": {
    "doc": "Memory driver synchronous -  MX25L QSPI and AT25DF SPI flash read write",
    "title": "Setting up AT91Bootstrap loader",
    "content": "To load the application binary onto the target device, we need to use at91bootstrap loader. Refer to the at91bootstrap loader documentation for details on how to configure, build and run bootstrap loader project and use it to bootstrap the application binaries. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/memory/sync/mx25l_at25df_read_write/readme.html#setting-up-at91bootstrap-loader",
    "relUrl": "/apps/driver/memory/sync/mx25l_at25df_read_write/readme.html#setting-up-at91bootstrap-loader"
  },"33": {
    "doc": "Memory driver synchronous -  MX25L QSPI and AT25DF SPI flash read write",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_a5d2_xult_freertos.X sam_a5d2_xult_freertos_iar.IAR/mx25l_at25df_read_write_sam_a5d2_xult_freertos.eww/mx25l_at25df_read_write_sam_a5d2_xult_freertos.eww | SAMA5D2 Xplained Ultra Evaluation Kit | . |   |   | . Setting up SAMA5D2 Xplained Ultra Evaluation Kit . Addtional hardware required . | SD Card with FAT32 file system | . Setting up the SD Card . | Download harmony MPU bootstrap loader from this location | Copy the downloaded boot loader binary( boot.bin) onto the SD card | . Setting up the board . | SDMMC slot used for bootloading the application is SDMMC1 | Short jumper JP2 (DEBUG_DIS) | Connect the Debug USB port on the board to the computer using a micro USB cable | Make sure that the jumper JP9 is removed (jumper pins are not shorted) | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/memory/sync/mx25l_at25df_read_write/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/driver/memory/sync/mx25l_at25df_read_write/readme.html#setting-up-the-hardware"
  },"34": {
    "doc": "Memory driver synchronous -  MX25L QSPI and AT25DF SPI flash read write",
    "title": "Running the Application",
    "content": ". | Build the application using its IDE | Copy the output binary (named ‘harmony.bin’) onto the SD Card (Refer to the ‘Setting up hardware’ section above for setting up the SD card) | Insert the SD card into SDMMC slot on the board (Refer to the ‘Setting up hardware’ section for the correct SDMMC slot) | Reset the board to run the application | LED is turned ON when the data read from each media matches with the data written in them | . Refer to the following table for LED name: . | Board | LED Name | . | SAMA5D2 Xplained Ultra Evaluation Kit | RGB_LED(Green) | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/memory/sync/mx25l_at25df_read_write/readme.html#running-the-application",
    "relUrl": "/apps/driver/memory/sync/mx25l_at25df_read_write/readme.html#running-the-application"
  },"35": {
    "doc": "Memory driver synchronous -  MX25L QSPI and AT25DF SPI flash read write",
    "title": "Memory driver synchronous -  MX25L QSPI and AT25DF SPI flash read write",
    "content": ". ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/memory/sync/mx25l_at25df_read_write/readme.html",
    "relUrl": "/apps/driver/memory/sync/mx25l_at25df_read_write/readme.html"
  },"36": {
    "doc": "SDMMC driver asynchronous - SDMMC Read Write",
    "title": "SDMMC driver asynchronous - SDMMC Read Write",
    "content": "This example application shows how to use the SDMMC driver in asynchronous mode to perform block operations on the SD Card Media. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/sdmmc/async/sdmmc_read_write/readme.html#sdmmc-driver-asynchronous---sdmmc-read-write",
    "relUrl": "/apps/driver/sdmmc/async/sdmmc_read_write/readme.html#sdmmc-driver-asynchronous---sdmmc-read-write"
  },"37": {
    "doc": "SDMMC driver asynchronous - SDMMC Read Write",
    "title": "Description",
    "content": ". | This example uses the SDMMC driver in asynchronous mode in both Bare-Metal and RTOS environment to perform Block Erase/Write/Read operations on SD-Card | This application writes 60KB (61440 bytes) of data starting at the SD Card memory location 0x2000 | It then reads and verifies the written data | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/sdmmc/async/sdmmc_read_write/readme.html#description",
    "relUrl": "/apps/driver/sdmmc/async/sdmmc_read_write/readme.html#description"
  },"38": {
    "doc": "SDMMC driver asynchronous - SDMMC Read Write",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/driver/sdmmc/async/sdmmc_read_write/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_a5d2_xult.X | MPLABX project for SAMA5D2 Xplained Ultra Evaluation Kit | . | sam_a5d2_xult_freertos.X | MPLABX project for SAMA5D2 Xplained Ultra Evaluation Kit | . | sam_a5d2_xult_freertos_iar.IAR/sdmmc_read_write_sam_a5d2_xult_freertos.eww/sdmmc_read_write_sam_a5d2_xult_freertos.eww | IAR project for SAMA5D2 Xplained Ultra Evaluation Kit | . | sam_a5d2_xult_iar.IAR/sdmmc_read_write_sam_a5d2_xult.eww/sdmmc_read_write_sam_a5d2_xult.eww | IAR project for SAMA5D2 Xplained Ultra Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/sdmmc/async/sdmmc_read_write/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/driver/sdmmc/async/sdmmc_read_write/readme.html#downloading-and-building-the-application"
  },"39": {
    "doc": "SDMMC driver asynchronous - SDMMC Read Write",
    "title": "Setting up AT91Bootstrap loader",
    "content": "To load the application binary onto the target device, we need to use at91bootstrap loader. Refer to the at91bootstrap loader documentation for details on how to configure, build and run bootstrap loader project and use it to bootstrap the application binaries. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/sdmmc/async/sdmmc_read_write/readme.html#setting-up-at91bootstrap-loader",
    "relUrl": "/apps/driver/sdmmc/async/sdmmc_read_write/readme.html#setting-up-at91bootstrap-loader"
  },"40": {
    "doc": "SDMMC driver asynchronous - SDMMC Read Write",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_a5d2_xult.X sam_a5d2_xult_freertos.X sam_a5d2_xult_freertos_iar.IAR/sdmmc_read_write_sam_a5d2_xult_freertos.eww/sdmmc_read_write_sam_a5d2_xult_freertos.eww sam_a5d2_xult_iar.IAR/sdmmc_read_write_sam_a5d2_xult.eww/sdmmc_read_write_sam_a5d2_xult.eww | SAMA5D2 Xplained Ultra Evaluation Kit | . |   |   | . Setting up SAMA5D2 Xplained Ultra Evaluation Kit . Addtional hardware required . | SD Card with FAT32 file system | . Setting up the SD Card . | Download harmony MPU bootstrap loader from this location | Copy the downloaded boot loader binary( boot.bin) onto the SD card | . Setting up the board . | SDMMC slot used for bootloading the application is SDMMC1 | Short jumper JP2 (DEBUG_DIS) | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/sdmmc/async/sdmmc_read_write/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/driver/sdmmc/async/sdmmc_read_write/readme.html#setting-up-the-hardware"
  },"41": {
    "doc": "SDMMC driver asynchronous - SDMMC Read Write",
    "title": "Running the Application",
    "content": ". | Build the application using its IDE | Copy the output binary (named ‘harmony.bin’) onto the SD Card (Refer to the ‘Setting up hardware’ section above for setting up the SD card) | Insert the SD card into SDMMC slot on the board (Refer to the ‘Setting up hardware’ section for the correct SDMMC slot) | Reset the board to run the application | The LED is turned ON when the read data from the SD Card matches with the written data | . NOTE: This demo application performs a raw read-write operation on the SD card. This causes the partition information to be overwritten causing the SD card file system to be corrupted. Hence resetting the board will not re-run the application demo (Board will fail to boot since it cannot find a valid partition). To repeat the demo we need to reformat SD card and prepare it as defined by the hardware setup. Refer to the following table for LED name: . | Board | LED Name | . | SAMA5D2 Xplained Ultra Evaluation Kit | RGB_LED(Green) | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/sdmmc/async/sdmmc_read_write/readme.html#running-the-application",
    "relUrl": "/apps/driver/sdmmc/async/sdmmc_read_write/readme.html#running-the-application"
  },"42": {
    "doc": "SDMMC driver asynchronous - SDMMC Read Write",
    "title": "SDMMC driver asynchronous - SDMMC Read Write",
    "content": ". ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/sdmmc/async/sdmmc_read_write/readme.html",
    "relUrl": "/apps/driver/sdmmc/async/sdmmc_read_write/readme.html"
  },"43": {
    "doc": "SDSPI driver asynchronous - SDSPI Read Write",
    "title": "SDSPI driver asynchronous - SDSPI Read Write",
    "content": "This example application shows how to use the SDSPI driver in asynchronous mode to perform block operations on the SD Card Media. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/sdspi/async/sdspi_read_write/readme.html#sdspi-driver-asynchronous---sdspi-read-write",
    "relUrl": "/apps/driver/sdspi/async/sdspi_read_write/readme.html#sdspi-driver-asynchronous---sdspi-read-write"
  },"44": {
    "doc": "SDSPI driver asynchronous - SDSPI Read Write",
    "title": "Description",
    "content": "This example uses the SDSPI driver in asynchronous mode. The asynchronous mode of the SDSPI driver performs non-blocking read and write operations. The SDSPI driver is configured to use DMA. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/sdspi/async/sdspi_read_write/readme.html#description",
    "relUrl": "/apps/driver/sdspi/async/sdspi_read_write/readme.html#description"
  },"45": {
    "doc": "SDSPI driver asynchronous - SDSPI Read Write",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/driver/sdspi/async/sdspi_read_write/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_a5d2_xult_freertos.X | MPLABX project for SAMA5D2 Xplained Ultra Evaluation Kit | . | sam_a5d2_xult_freertos_iar.IAR/sdspi_read_write_sam_a5d2_xult_freertos.eww/sdspi_read_write_sam_a5d2_xult_freertos.eww | IAR project for SAMA5D2 Xplained Ultra Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/sdspi/async/sdspi_read_write/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/driver/sdspi/async/sdspi_read_write/readme.html#downloading-and-building-the-application"
  },"46": {
    "doc": "SDSPI driver asynchronous - SDSPI Read Write",
    "title": "Setting up AT91Bootstrap loader",
    "content": "To load the application binary onto the target device, we need to use at91bootstrap loader. Refer to the at91bootstrap loader documentation for details on how to configure, build and run bootstrap loader project and use it to bootstrap the application binaries. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/sdspi/async/sdspi_read_write/readme.html#setting-up-at91bootstrap-loader",
    "relUrl": "/apps/driver/sdspi/async/sdspi_read_write/readme.html#setting-up-at91bootstrap-loader"
  },"47": {
    "doc": "SDSPI driver asynchronous - SDSPI Read Write",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_a5d2_xult_freertos.X sam_a5d2_xult_freertos_iar.IAR/sdspi_read_write_sam_a5d2_xult_freertos.eww/sdspi_read_write_sam_a5d2_xult_freertos.eww | SAMA5D2 Xplained Ultra Evaluation Kit | . |   |   | . Setting up SAMA5D2 Xplained Ultra Evaluation Kit . Addtional hardware required . | SD Card with FAT32 file system | I/O1 Xplained Pro Extension Kit | Micro-SD card | . Setting up the SD Card . | Download harmony MPU bootstrap loader from this location | Copy the downloaded boot loader binary( boot.bin) onto the SD card | . Setting up the board . | Connect the I/O1 Xplained Pro Extension Kit to the EXT1 header | Insert microSD card on the I/O1 Xplained Pro Extension Kit | SDMMC slot used for bootloading the application is SDMMC1 | Short jumper JP2 (DEBUG_DIS) | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/sdspi/async/sdspi_read_write/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/driver/sdspi/async/sdspi_read_write/readme.html#setting-up-the-hardware"
  },"48": {
    "doc": "SDSPI driver asynchronous - SDSPI Read Write",
    "title": "Running the Application",
    "content": ". | Build the application using its IDE | Copy the output binary (named ‘harmony.bin’) onto the SD Card (Refer to the ‘Setting up hardware’ section above for setting up the SD card) | Insert the SD card into SDMMC slot on the board (Refer to the ‘Setting up hardware’ section for the correct SDMMC slot) | Reset the board to run the application | The LED is turned ON when the read data from the SD card matches with the written data | . Refer to the following table for LED name: . | Board | LED Name | . | SAMA5D2 Xplained Ultra Evaluation Kit | RGB_LED(Green) | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/sdspi/async/sdspi_read_write/readme.html#running-the-application",
    "relUrl": "/apps/driver/sdspi/async/sdspi_read_write/readme.html#running-the-application"
  },"49": {
    "doc": "SDSPI driver asynchronous - SDSPI Read Write",
    "title": "SDSPI driver asynchronous - SDSPI Read Write",
    "content": ". ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/sdspi/async/sdspi_read_write/readme.html",
    "relUrl": "/apps/driver/sdspi/async/sdspi_read_write/readme.html"
  },"50": {
    "doc": "SDSPI driver synchronous - SDSPI Read Write",
    "title": "SDSPI driver synchronous - SDSPI Read Write",
    "content": "This example application shows how to use the SDSPI driver in synchronous mode to perform block operations on the SD Card Media. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/sdspi/sync/sdspi_read_write/readme.html#sdspi-driver-synchronous---sdspi-read-write",
    "relUrl": "/apps/driver/sdspi/sync/sdspi_read_write/readme.html#sdspi-driver-synchronous---sdspi-read-write"
  },"51": {
    "doc": "SDSPI driver synchronous - SDSPI Read Write",
    "title": "Description",
    "content": ". | The synchronous mode of the SDSPI driver is configured to use DMA and performs blocking read and write operations . | This example uses the SDSPI driver in synchronous mode in an RTOS environment . | A separate RTOS thread is created by the MHC to run the SDSPI task routine. This task routine checks for the SD-Card attach/detach status and initializes the SD-Card making it ready for the application to submit read and write requests . | This application writes 10KB (10240 bytes) of data starting at the SD Card memory location 0x2000 | The application then reads and verifies the written data | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/sdspi/sync/sdspi_read_write/readme.html#description",
    "relUrl": "/apps/driver/sdspi/sync/sdspi_read_write/readme.html#description"
  },"52": {
    "doc": "SDSPI driver synchronous - SDSPI Read Write",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/driver/sdspi/sync/sdspi_read_write/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_a5d2_xult_freertos.X | MPLABX project for SAMA5D2 Xplained Ultra Evaluation Kit | . | sam_a5d2_xult_freertos_iar.IAR/sdspi_read_write_sam_a5d2_xult_freertos.eww/sdspi_read_write_sam_a5d2_xult_freertos.eww | IAR project for SAMA5D2 Xplained Ultra Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/sdspi/sync/sdspi_read_write/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/driver/sdspi/sync/sdspi_read_write/readme.html#downloading-and-building-the-application"
  },"53": {
    "doc": "SDSPI driver synchronous - SDSPI Read Write",
    "title": "Setting up AT91Bootstrap loader",
    "content": "To load the application binary onto the target device, we need to use at91bootstrap loader. Refer to the at91bootstrap loader documentation for details on how to configure, build and run bootstrap loader project and use it to bootstrap the application binaries. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/sdspi/sync/sdspi_read_write/readme.html#setting-up-at91bootstrap-loader",
    "relUrl": "/apps/driver/sdspi/sync/sdspi_read_write/readme.html#setting-up-at91bootstrap-loader"
  },"54": {
    "doc": "SDSPI driver synchronous - SDSPI Read Write",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_a5d2_xult_freertos.X sam_a5d2_xult_freertos_iar.IAR/sdspi_read_write_sam_a5d2_xult_freertos.eww/sdspi_read_write_sam_a5d2_xult_freertos.eww | SAMA5D2 Xplained Ultra Evaluation Kit | . |   |   | . Setting up SAMA5D2 Xplained Ultra Evaluation Kit . Addtional hardware required . | SD Card with FAT32 file system | I/O1 Xplained Pro Extension Kit | Micro-SD card | . Setting up the SD Card . | Download harmony MPU bootstrap loader from this location | Copy the downloaded boot loader binary( boot.bin) onto the SD card | . Setting up the board . | Connect the I/O1 Xplained Pro Extension Kit to the EXT1 header | Insert microSD card on the I/O1 Xplained Pro Extension Kit | SDMMC slot used for bootloading the application is SDMMC1 | Short jumper JP2 (DEBUG_DIS) | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/sdspi/sync/sdspi_read_write/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/driver/sdspi/sync/sdspi_read_write/readme.html#setting-up-the-hardware"
  },"55": {
    "doc": "SDSPI driver synchronous - SDSPI Read Write",
    "title": "Running the Application",
    "content": ". | Build the application using its IDE | Copy the output binary (named ‘harmony.bin’) onto the SD Card (Refer to the ‘Setting up hardware’ section above for setting up the SD card) | Insert the SD card into SDMMC slot on the board (Refer to the ‘Setting up hardware’ section for the correct SDMMC slot) | Reset the board to run the application | The LED is turned ON when the read data from the SD card matches with the written data | . Refer to the following table for LED name: . | Board | LED Name | . | SAMA5D2 Xplained Ultra Evaluation Kit | RGB_LED(Green) | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/sdspi/sync/sdspi_read_write/readme.html#running-the-application",
    "relUrl": "/apps/driver/sdspi/sync/sdspi_read_write/readme.html#running-the-application"
  },"56": {
    "doc": "SDSPI driver synchronous - SDSPI Read Write",
    "title": "SDSPI driver synchronous - SDSPI Read Write",
    "content": ". ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/sdspi/sync/sdspi_read_write/readme.html",
    "relUrl": "/apps/driver/sdspi/sync/sdspi_read_write/readme.html"
  },"57": {
    "doc": "SPI Driver asynchronous - multi client",
    "title": "SPI Driver asynchronous - multi client",
    "content": "This example demonstrates how to use single instance of the SPI driver in asynchronous mode to communicate with multiple EEPROMs. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/spi/async/spi_multi_slave/readme.html#spi-driver-asynchronous---multi-client",
    "relUrl": "/apps/driver/spi/async/spi_multi_slave/readme.html#spi-driver-asynchronous---multi-client"
  },"58": {
    "doc": "SPI Driver asynchronous - multi client",
    "title": "Description",
    "content": "This example write and read data to and from two separate EEPROM connected over the same SPI bus by using the multi client feature of the driver.The example also demonstrates how to setup two different EEPROM transfers at different baud rates. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/spi/async/spi_multi_slave/readme.html#description",
    "relUrl": "/apps/driver/spi/async/spi_multi_slave/readme.html#description"
  },"59": {
    "doc": "SPI Driver asynchronous - multi client",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/driver/spi/async/spi_multi_slave/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_a5d2_xult.X | MPLABX project for SAMA5D2 Xplained Ultra Evaluation Kit | . | sam_a5d2_xult_freertos.X | MPLABX project for SAMA5D2 Xplained Ultra Evaluation Kit | . | sam_a5d2_xult_freertos_iar.IAR/spi_multi_slave_sam_a5d2_xult_freertos.eww/spi_multi_slave_sam_a5d2_xult_freertos.eww | IAR project for SAMA5D2 Xplained Ultra Evaluation Kit | . | sam_a5d2_xult_iar.IAR/spi_multi_slave_sam_a5d2_xult.eww/spi_multi_slave_sam_a5d2_xult.eww | IAR project for SAMA5D2 Xplained Ultra Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/spi/async/spi_multi_slave/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/driver/spi/async/spi_multi_slave/readme.html#downloading-and-building-the-application"
  },"60": {
    "doc": "SPI Driver asynchronous - multi client",
    "title": "Setting up AT91Bootstrap loader",
    "content": "To load the application binary onto the target device, we need to use at91bootstrap loader. Refer to the at91bootstrap loader documentation for details on how to configure, build and run bootstrap loader project and use it to bootstrap the application binaries. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/spi/async/spi_multi_slave/readme.html#setting-up-at91bootstrap-loader",
    "relUrl": "/apps/driver/spi/async/spi_multi_slave/readme.html#setting-up-at91bootstrap-loader"
  },"61": {
    "doc": "SPI Driver asynchronous - multi client",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_a5d2_xult.X sam_a5d2_xult_freertos.X sam_a5d2_xult_freertos_iar.IAR/spi_multi_slave_sam_a5d2_xult_freertos.eww/spi_multi_slave_sam_a5d2_xult_freertos.eww sam_a5d2_xult_iar.IAR/spi_multi_slave_sam_a5d2_xult.eww/spi_multi_slave_sam_a5d2_xult.eww | SAMA5D2 Xplained Ultra Evaluation Kit | . |   |   | . Setting up SAMA5D2 Xplained Ultra Evaluation Kit . Addtional hardware required . | SD Card with FAT32 file system | Two EEPROM 4 Click boards | Two mikroBUS Xplained Pro boards | . Setting up the SD Card . | Download harmony MPU bootstrap loader from this location | Copy the downloaded boot loader binary( boot.bin) onto the SD card | . Setting up the board . | Install EEPROM 4 Click boards on to the mikroBUS Xplained Pro boards | Connect mikroBUS Xplained Pro on to the “EXT1” and “EXT2” headers | SDMMC slot used for bootloading the application is SDMMC1 | Short jumper JP2 (DEBUG_DIS) | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/spi/async/spi_multi_slave/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/driver/spi/async/spi_multi_slave/readme.html#setting-up-the-hardware"
  },"62": {
    "doc": "SPI Driver asynchronous - multi client",
    "title": "Running the Application",
    "content": ". | Build the application using its IDE | Copy the output binary (named ‘harmony.bin’) onto the SD Card (Refer to the ‘Setting up hardware’ section above for setting up the SD card) | Insert the SD card into SDMMC slot on the board (Refer to the ‘Setting up hardware’ section for the correct SDMMC slot) | Reset the board to run the application | The LED turns ON when the data read from the EEPROMs matches with the data written to the EEPROMs. | . Refer to the following table for LED name: . | Board | LED Name | . | SAMA5D2 Xplained Ultra Evaluation Kit | RGB_LED(Green) | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/spi/async/spi_multi_slave/readme.html#running-the-application",
    "relUrl": "/apps/driver/spi/async/spi_multi_slave/readme.html#running-the-application"
  },"63": {
    "doc": "SPI Driver asynchronous - multi client",
    "title": "SPI Driver asynchronous - multi client",
    "content": ". ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/spi/async/spi_multi_slave/readme.html",
    "relUrl": "/apps/driver/spi/async/spi_multi_slave/readme.html"
  },"64": {
    "doc": "SPI Driver asynchronous - Self loopback multi client",
    "title": "SPI Driver asynchronous - Self loopback multi client",
    "content": "This example demonstrates how to use the SPI driver in asynchronous mode to achieve self-loop back between multiple clients. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/spi/async/spi_self_loopback_multi_client/readme.html#spi-driver-asynchronous---self-loopback-multi-client",
    "relUrl": "/apps/driver/spi/async/spi_self_loopback_multi_client/readme.html#spi-driver-asynchronous---self-loopback-multi-client"
  },"65": {
    "doc": "SPI Driver asynchronous - Self loopback multi client",
    "title": "Description",
    "content": ". | This example writes and reads back the same data (self loop back) for two different clients connected over the same SPI bus by using the multi client feature of the driver . | It uses the request (write and read request) queuing feature of the asynchronous driver and does not waste CPU bandwidth in waiting for previous request completion . | The example also demonstrates how to setup two different client transfers at different baud rates . | This example performs self loop back only once after a power on reset | Success is indicated when a successful self loop back is reported by both the clients | After the loop back test is complete, the application remains in the idle state | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/spi/async/spi_self_loopback_multi_client/readme.html#description",
    "relUrl": "/apps/driver/spi/async/spi_self_loopback_multi_client/readme.html#description"
  },"66": {
    "doc": "SPI Driver asynchronous - Self loopback multi client",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/driver/spi/async/spi_self_loopback_multi_client/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_a5d2_xult.X | MPLABX project for SAMA5D2 Xplained Ultra Evaluation Kit | . | sam_a5d2_xult_freertos.X | MPLABX project for SAMA5D2 Xplained Ultra Evaluation Kit | . | sam_a5d2_xult_freertos_iar.IAR/spi_self_loopback_multi_client_sam_a5d2_xult_freertos.eww/spi_self_loopback_multi_client_sam_a5d2_xult_freertos.eww | IAR project for SAMA5D2 Xplained Ultra Evaluation Kit | . | sam_a5d2_xult_iar.IAR/spi_self_loopback_multi_client_sam_a5d2_xult.eww/spi_self_loopback_multi_client_sam_a5d2_xult.eww | IAR project for SAMA5D2 Xplained Ultra Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/spi/async/spi_self_loopback_multi_client/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/driver/spi/async/spi_self_loopback_multi_client/readme.html#downloading-and-building-the-application"
  },"67": {
    "doc": "SPI Driver asynchronous - Self loopback multi client",
    "title": "Setting up AT91Bootstrap loader",
    "content": "To load the application binary onto the target device, we need to use at91bootstrap loader. Refer to the at91bootstrap loader documentation for details on how to configure, build and run bootstrap loader project and use it to bootstrap the application binaries. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/spi/async/spi_self_loopback_multi_client/readme.html#setting-up-at91bootstrap-loader",
    "relUrl": "/apps/driver/spi/async/spi_self_loopback_multi_client/readme.html#setting-up-at91bootstrap-loader"
  },"68": {
    "doc": "SPI Driver asynchronous - Self loopback multi client",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_a5d2_xult.X sam_a5d2_xult_freertos.X sam_a5d2_xult_freertos_iar.IAR/spi_self_loopback_multi_client_sam_a5d2_xult_freertos.eww/spi_self_loopback_multi_client_sam_a5d2_xult_freertos.eww sam_a5d2_xult_iar.IAR/spi_self_loopback_multi_client_sam_a5d2_xult.eww/spi_self_loopback_multi_client_sam_a5d2_xult.eww | SAMA5D2 Xplained Ultra Evaluation Kit | . |   |   | . Setting up SAMA5D2 Xplained Ultra Evaluation Kit . Addtional hardware required . | SD Card with FAT32 file system | . Setting up the SD Card . | Download harmony MPU bootstrap loader from this location | Copy the downloaded boot loader binary( boot.bin) onto the SD card | . Setting up the board . | Use jumper wire to Connect “Pin 16 of EXT1 header” to “Pin 17 of EXT1 header” . | SPI1 MOSI signal is mapped to PD26 that is routed to “Pin 16 of EXT1 header” | SPI1 MISO signal is mapped to PD27 that is routed to “Pin 17 of EXT1 header” | . | SDMMC slot used for bootloading the application is SDMMC1 | Short jumper JP2 (DEBUG_DIS) | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/spi/async/spi_self_loopback_multi_client/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/driver/spi/async/spi_self_loopback_multi_client/readme.html#setting-up-the-hardware"
  },"69": {
    "doc": "SPI Driver asynchronous - Self loopback multi client",
    "title": "Running the Application",
    "content": ". | Build the application using its IDE | Copy the output binary (named ‘harmony.bin’) onto the SD Card (Refer to the ‘Setting up hardware’ section above for setting up the SD card) | Insert the SD card into SDMMC slot on the board (Refer to the ‘Setting up hardware’ section for the correct SDMMC slot) | Reset the board to run the application | LED is turned ON on Success | . Refer to the following table for LED name: . | Board | LED Name | . | SAMA5D2 Xplained Ultra Evaluation Kit | RGB_LED(Green) | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/spi/async/spi_self_loopback_multi_client/readme.html#running-the-application",
    "relUrl": "/apps/driver/spi/async/spi_self_loopback_multi_client/readme.html#running-the-application"
  },"70": {
    "doc": "SPI Driver asynchronous - Self loopback multi client",
    "title": "SPI Driver asynchronous - Self loopback multi client",
    "content": ". ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/spi/async/spi_self_loopback_multi_client/readme.html",
    "relUrl": "/apps/driver/spi/async/spi_self_loopback_multi_client/readme.html"
  },"71": {
    "doc": "SPI Driver synchronous - multi client",
    "title": "SPI Driver synchronous - multi client",
    "content": "This example demonstrates how to use single instance of the SPI driver in synchronous mode to communicate with multiple EEPROMs in an RTOS environment. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/spi/sync/spi_multi_slave/readme.html#spi-driver-synchronous---multi-client",
    "relUrl": "/apps/driver/spi/sync/spi_multi_slave/readme.html#spi-driver-synchronous---multi-client"
  },"72": {
    "doc": "SPI Driver synchronous - multi client",
    "title": "Description",
    "content": "This example writes and reads data to and from two separate EEPROMs connected over the same SPI bus by using the multi client feature of a synchronous SPI driver. The example also demonstrates how to setup two different client transfers at two different baud rates. The example has three RTOS threads for the purpose: . | APP_EEPROM1_Tasks: This thread performs write-read operation on the first EEPROM | APP_EEPROM2_Tasks: This thread performs write-read operation on the second EEPROM | APP_MONITOR_Tasks: This thread checks the status of the EEPROM transfers and turns on the LED if the transfers are successful | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/spi/sync/spi_multi_slave/readme.html#description",
    "relUrl": "/apps/driver/spi/sync/spi_multi_slave/readme.html#description"
  },"73": {
    "doc": "SPI Driver synchronous - multi client",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/driver/spi/sync/spi_multi_slave/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_a5d2_xult_freertos.X | MPLABX project for SAMA5D2 Xplained Ultra Evaluation Kit | . | sam_a5d2_xult_freertos_iar.IAR/spi_multi_slave_freertos_sam_a5d2_xult_freertos.eww/spi_multi_slave_freertos_sam_a5d2_xult_freertos.eww | IAR project for SAMA5D2 Xplained Ultra Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/spi/sync/spi_multi_slave/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/driver/spi/sync/spi_multi_slave/readme.html#downloading-and-building-the-application"
  },"74": {
    "doc": "SPI Driver synchronous - multi client",
    "title": "Setting up AT91Bootstrap loader",
    "content": "To load the application binary onto the target device, we need to use at91bootstrap loader. Refer to the at91bootstrap loader documentation for details on how to configure, build and run bootstrap loader project and use it to bootstrap the application binaries. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/spi/sync/spi_multi_slave/readme.html#setting-up-at91bootstrap-loader",
    "relUrl": "/apps/driver/spi/sync/spi_multi_slave/readme.html#setting-up-at91bootstrap-loader"
  },"75": {
    "doc": "SPI Driver synchronous - multi client",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_a5d2_xult_freertos.X sam_a5d2_xult_freertos_iar.IAR/spi_multi_slave_freertos_sam_a5d2_xult_freertos.eww/spi_multi_slave_freertos_sam_a5d2_xult_freertos.eww | SAMA5D2 Xplained Ultra Evaluation Kit | . |   |   | . Setting up SAMA5D2 Xplained Ultra Evaluation Kit . Addtional hardware required . | SD Card with FAT32 file system | Two EEPROM 4 Click boards | Two mikroBUS Xplained Pro boards | . Setting up the SD Card . | Download harmony MPU bootstrap loader from this location | Copy the downloaded boot loader binary( boot.bin) onto the SD card | . Setting up the board . | Install EEPROM 4 Click boards on to the mikroBUS Xplained Pro boards | Connect mikroBUS Xplained Pro on to the “EXT1” and “EXT2” headers | SDMMC slot used for bootloading the application is SDMMC1 | Short jumper JP2 (DEBUG_DIS) | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/spi/sync/spi_multi_slave/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/driver/spi/sync/spi_multi_slave/readme.html#setting-up-the-hardware"
  },"76": {
    "doc": "SPI Driver synchronous - multi client",
    "title": "Running the Application",
    "content": ". | Build the application using its IDE | Copy the output binary (named ‘harmony.bin’) onto the SD Card (Refer to the ‘Setting up hardware’ section above for setting up the SD card) | Insert the SD card into SDMMC slot on the board (Refer to the ‘Setting up hardware’ section for the correct SDMMC slot) | Reset the board to run the application | The LED turns ON when the data read from the EEPROMs matches with the data written to the EEPROMs. | . Refer to the following table for LED name: . | Board | LED Name | . | SAMA5D2 Xplained Ultra Evaluation Kit | RGB_LED(Green) | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/spi/sync/spi_multi_slave/readme.html#running-the-application",
    "relUrl": "/apps/driver/spi/sync/spi_multi_slave/readme.html#running-the-application"
  },"77": {
    "doc": "SPI Driver synchronous - multi client",
    "title": "SPI Driver synchronous - multi client",
    "content": ". ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/spi/sync/spi_multi_slave/readme.html",
    "relUrl": "/apps/driver/spi/sync/spi_multi_slave/readme.html"
  },"78": {
    "doc": "SPI Driver synchronous - Self loopback multi client",
    "title": "SPI Driver synchronous - Self loopback multi client",
    "content": "This example demonstrates how to use the SPI driver in synchronous mode to achieve self-loop back between multiple clients in RTOS environment. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/spi/sync/spi_self_loopback_multi_client/readme.html#spi-driver-synchronous---self-loopback-multi-client",
    "relUrl": "/apps/driver/spi/sync/spi_self_loopback_multi_client/readme.html#spi-driver-synchronous---self-loopback-multi-client"
  },"79": {
    "doc": "SPI Driver synchronous - Self loopback multi client",
    "title": "Description",
    "content": ". | This example writes and reads back the same data (self loop back) for two different clients connected over the same SPI bus by using the multi client feature of a synchronous SPI driver . | The example also demonstrates how to setup two different client transfers at two different baud rates . | The example has three RTOS threads for the purpose: . | APP_CLIENT1_Tasks: . | This thread opens the SPI driver instance and performs a continuous loop back transfer | If the loop back is successful, the loop back is repeated every 100 ms | In case of an error, the thread closes the driver and suspends itself | . | APP_CLIENT2_Tasks: . | This thread opens the SPI driver instance and performs a continuous loop back transfer | If the loop back is successful, the loop back is repeated every 100 ms | In case of an error, the thread closes the driver and suspends itself | . | APP_MONITOR_Tasks: . | This thread checks the status of loop back done by the two client tasks and turns on the LED if the loop back transfer status reported by both the clients is successful | . | . | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/spi/sync/spi_self_loopback_multi_client/readme.html#description",
    "relUrl": "/apps/driver/spi/sync/spi_self_loopback_multi_client/readme.html#description"
  },"80": {
    "doc": "SPI Driver synchronous - Self loopback multi client",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/driver/spi/sync/spi_self_loopback_multi_client/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_a5d2_xult_freertos.X | MPLABX project for SAMA5D2 Xplained Ultra Evaluation Kit | . | sam_a5d2_xult_freertos_iar.IAR/spi_self_loopback_multi_client_freertos_sam_a5d2_xult_freertos.eww/spi_self_loopback_multi_client_freertos_sam_a5d2_xult_freertos.eww | IAR project for SAMA5D2 Xplained Ultra Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/spi/sync/spi_self_loopback_multi_client/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/driver/spi/sync/spi_self_loopback_multi_client/readme.html#downloading-and-building-the-application"
  },"81": {
    "doc": "SPI Driver synchronous - Self loopback multi client",
    "title": "Setting up AT91Bootstrap loader",
    "content": "To load the application binary onto the target device, we need to use at91bootstrap loader. Refer to the at91bootstrap loader documentation for details on how to configure, build and run bootstrap loader project and use it to bootstrap the application binaries. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/spi/sync/spi_self_loopback_multi_client/readme.html#setting-up-at91bootstrap-loader",
    "relUrl": "/apps/driver/spi/sync/spi_self_loopback_multi_client/readme.html#setting-up-at91bootstrap-loader"
  },"82": {
    "doc": "SPI Driver synchronous - Self loopback multi client",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_a5d2_xult_freertos.X sam_a5d2_xult_freertos_iar.IAR/spi_self_loopback_multi_client_freertos_sam_a5d2_xult_freertos.eww/spi_self_loopback_multi_client_freertos_sam_a5d2_xult_freertos.eww | SAMA5D2 Xplained Ultra Evaluation Kit | . |   |   | . Setting up SAMA5D2 Xplained Ultra Evaluation Kit . Addtional hardware required . | SD Card with FAT32 file system | . Setting up the SD Card . | Download harmony MPU bootstrap loader from this location | Copy the downloaded boot loader binary( boot.bin) onto the SD card | . Setting up the board . | Use jumper wire to Connect “Pin 16 of EXT1 header” to “Pin 17 of EXT1 header” . | SPI1 MOSI signal is mapped to PD26 that is routed to “Pin 16 of EXT1 header” | SPI1 MISO signal is mapped to PD27 that is routed to “Pin 17 of EXT1 header” | . | SDMMC slot used for bootloading the application is SDMMC1 | Short jumper JP2 (DEBUG_DIS) | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/spi/sync/spi_self_loopback_multi_client/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/driver/spi/sync/spi_self_loopback_multi_client/readme.html#setting-up-the-hardware"
  },"83": {
    "doc": "SPI Driver synchronous - Self loopback multi client",
    "title": "Running the Application",
    "content": ". | Build the application using its IDE | Copy the output binary (named ‘harmony.bin’) onto the SD Card (Refer to the ‘Setting up hardware’ section above for setting up the SD card) | Insert the SD card into SDMMC slot on the board (Refer to the ‘Setting up hardware’ section for the correct SDMMC slot) | Reset the board to run the application | LED is turned ON on Success | . Refer to the following table for LED name: . | Board | LED Name | . | SAMA5D2 Xplained Ultra Evaluation Kit | RGB_LED(Green) | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/spi/sync/spi_self_loopback_multi_client/readme.html#running-the-application",
    "relUrl": "/apps/driver/spi/sync/spi_self_loopback_multi_client/readme.html#running-the-application"
  },"84": {
    "doc": "SPI Driver synchronous - Self loopback multi client",
    "title": "SPI Driver synchronous - Self loopback multi client",
    "content": ". ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/spi/sync/spi_self_loopback_multi_client/readme.html",
    "relUrl": "/apps/driver/spi/sync/spi_self_loopback_multi_client/readme.html"
  },"85": {
    "doc": "SPI EEPROM AT25 driver - EEPROM Read Write",
    "title": "SPI EEPROM AT25 driver - EEPROM Read Write",
    "content": "This example application shows how to use the AT25 driver to perform read and write operations on AT25 series of EEPROM. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/spi_eeprom/at25/at25_eeprom_read_write/readme.html#spi-eeprom-at25-driver---eeprom-read-write",
    "relUrl": "/apps/driver/spi_eeprom/at25/at25_eeprom_read_write/readme.html#spi-eeprom-at25-driver---eeprom-read-write"
  },"86": {
    "doc": "SPI EEPROM AT25 driver - EEPROM Read Write",
    "title": "Description",
    "content": "This example uses the AT25 driver to communicate with the SPI based AT25 series of external EEPROMs to perform write and read operations in Bare-Metal environment. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/spi_eeprom/at25/at25_eeprom_read_write/readme.html#description",
    "relUrl": "/apps/driver/spi_eeprom/at25/at25_eeprom_read_write/readme.html#description"
  },"87": {
    "doc": "SPI EEPROM AT25 driver - EEPROM Read Write",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/driver/spi_eeprom/at25/at25_eeprom_read_write/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_a5d2_xult.X | MPLABX project for SAMA5D2 Xplained Ultra Evaluation Kit | . | sam_a5d2_xult_freertos.X | MPLABX project for SAMA5D2 Xplained Ultra Evaluation Kit | . | sam_a5d2_xult_freertos_iar.IAR/at25_eeprom_read_write_sam_a5d2_xult_freertos.eww/at25_eeprom_read_write_sam_a5d2_xult_freertos.eww | IAR project for SAMA5D2 Xplained Ultra Evaluation Kit | . | sam_a5d2_xult_iar.IAR/at25_eeprom_read_write_sam_a5d2_xult.eww/at25_eeprom_read_write_sam_a5d2_xult.eww | IAR project for SAMA5D2 Xplained Ultra Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/spi_eeprom/at25/at25_eeprom_read_write/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/driver/spi_eeprom/at25/at25_eeprom_read_write/readme.html#downloading-and-building-the-application"
  },"88": {
    "doc": "SPI EEPROM AT25 driver - EEPROM Read Write",
    "title": "Setting up AT91Bootstrap loader",
    "content": "To load the application binary onto the target device, we need to use at91bootstrap loader. Refer to the at91bootstrap loader documentation for details on how to configure, build and run bootstrap loader project and use it to bootstrap the application binaries. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/spi_eeprom/at25/at25_eeprom_read_write/readme.html#setting-up-at91bootstrap-loader",
    "relUrl": "/apps/driver/spi_eeprom/at25/at25_eeprom_read_write/readme.html#setting-up-at91bootstrap-loader"
  },"89": {
    "doc": "SPI EEPROM AT25 driver - EEPROM Read Write",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_a5d2_xult.X sam_a5d2_xult_freertos.X sam_a5d2_xult_freertos_iar.IAR/at25_eeprom_read_write_sam_a5d2_xult_freertos.eww/at25_eeprom_read_write_sam_a5d2_xult_freertos.eww sam_a5d2_xult_iar.IAR/at25_eeprom_read_write_sam_a5d2_xult.eww/at25_eeprom_read_write_sam_a5d2_xult.eww | SAMA5D2 Xplained Ultra Evaluation Kit | . |   |   | . Setting up SAMA5D2 Xplained Ultra Evaluation Kit . Addtional hardware required . | SD Card with FAT32 file system | EEPROM 4 Click board | mikroBUS Xplained Pro board | . Setting up the SD Card . | Download harmony MPU bootstrap loader from this location | Copy the downloaded boot loader binary( boot.bin) onto the SD card | . Setting up the board . | Install an EEPROM 4 Click board on to the mikroBUS Xplained Pro board | Connect mikroBUS Xplained Pro board to the EXT1 header | SDMMC slot used for bootloading the application is SDMMC1 | Short jumper JP2 (DEBUG_DIS) | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/spi_eeprom/at25/at25_eeprom_read_write/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/driver/spi_eeprom/at25/at25_eeprom_read_write/readme.html#setting-up-the-hardware"
  },"90": {
    "doc": "SPI EEPROM AT25 driver - EEPROM Read Write",
    "title": "Running the Application",
    "content": ". | Build the application using its IDE | Copy the output binary (named ‘harmony.bin’) onto the SD Card (Refer to the ‘Setting up hardware’ section above for setting up the SD card) | Insert the SD card into SDMMC slot on the board (Refer to the ‘Setting up hardware’ section for the correct SDMMC slot) | Reset the board to run the application | The LED is turned ON when the value read from EEPROM matches with the written data | . Refer to the following table for LED name: . | Board | LED Name | . | SAMA5D2 Xplained Ultra Evaluation Kit | RGB_LED(Green) | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/spi_eeprom/at25/at25_eeprom_read_write/readme.html#running-the-application",
    "relUrl": "/apps/driver/spi_eeprom/at25/at25_eeprom_read_write/readme.html#running-the-application"
  },"91": {
    "doc": "SPI EEPROM AT25 driver - EEPROM Read Write",
    "title": "SPI EEPROM AT25 driver - EEPROM Read Write",
    "content": ". ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/spi_eeprom/at25/at25_eeprom_read_write/readme.html",
    "relUrl": "/apps/driver/spi_eeprom/at25/at25_eeprom_read_write/readme.html"
  },"92": {
    "doc": "SPI Flash AT25DF - AT25DF flash read write",
    "title": "SPI Flash AT25DF - AT25DF flash read write",
    "content": "This example application shows how to use the AT25DF SPI flash driver to perform block operations on the on-board AT25DF Flash memory. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/spi_flash/at25df/at25df_flash_read_write/readme.html#spi-flash-at25df---at25df-flash-read-write",
    "relUrl": "/apps/driver/spi_flash/at25df/at25df_flash_read_write/readme.html#spi-flash-at25df---at25df-flash-read-write"
  },"93": {
    "doc": "SPI Flash AT25DF - AT25DF flash read write",
    "title": "Description",
    "content": "This application uses the AT25DF SPI flash driver to Erase/Write/Read on the On-Board AT25DF Flash memory using the SPI peripheral library.The application consists of APP_Tasks() which is called through SYS_Tasks() routine. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/spi_flash/at25df/at25df_flash_read_write/readme.html#description",
    "relUrl": "/apps/driver/spi_flash/at25df/at25df_flash_read_write/readme.html#description"
  },"94": {
    "doc": "SPI Flash AT25DF - AT25DF flash read write",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/driver/spi_flash/at25df/at25df_flash_read_write/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_a5d2_xult.X | MPLABX project for SAMA5D2 Xplained Ultra Evaluation Kit | . | sam_a5d2_xult_iar.IAR/at25df_flash_read_write_sam_a5d2_xult.eww/at25df_flash_read_write_sam_a5d2_xult.eww | IAR project for SAMA5D2 Xplained Ultra Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/spi_flash/at25df/at25df_flash_read_write/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/driver/spi_flash/at25df/at25df_flash_read_write/readme.html#downloading-and-building-the-application"
  },"95": {
    "doc": "SPI Flash AT25DF - AT25DF flash read write",
    "title": "Setting up AT91Bootstrap loader",
    "content": "To load the application binary onto the target device, we need to use at91bootstrap loader. Refer to the at91bootstrap loader documentation for details on how to configure, build and run bootstrap loader project and use it to bootstrap the application binaries. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/spi_flash/at25df/at25df_flash_read_write/readme.html#setting-up-at91bootstrap-loader",
    "relUrl": "/apps/driver/spi_flash/at25df/at25df_flash_read_write/readme.html#setting-up-at91bootstrap-loader"
  },"96": {
    "doc": "SPI Flash AT25DF - AT25DF flash read write",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_a5d2_xult.X sam_a5d2_xult_iar.IAR/at25df_flash_read_write_sam_a5d2_xult.eww/at25df_flash_read_write_sam_a5d2_xult.eww | SAMA5D2 Xplained Ultra Evaluation Kit | . |   |   | . Setting up SAMA5D2 Xplained Ultra Evaluation Kit . Addtional hardware required . | SD Card with FAT32 file system | . Setting up the SD Card . | Download harmony MPU bootstrap loader from this location | Copy the downloaded boot loader binary( boot.bin) onto the SD card | . Setting up the board . | SDMMC slot used for bootloading the application is SDMMC1 | Short jumper JP2 (DEBUG_DIS) | Connect the Debug USB port on the board to the computer using a micro USB cable | Make sure that the jumper JP9 is removed (jumper pins are not shorted) | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/spi_flash/at25df/at25df_flash_read_write/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/driver/spi_flash/at25df/at25df_flash_read_write/readme.html#setting-up-the-hardware"
  },"97": {
    "doc": "SPI Flash AT25DF - AT25DF flash read write",
    "title": "Running the Application",
    "content": ". | Build the application using its IDE | Copy the output binary (named ‘harmony.bin’) onto the SD Card (Refer to the ‘Setting up hardware’ section above for setting up the SD card) | Insert the SD card into SDMMC slot on the board (Refer to the ‘Setting up hardware’ section for the correct SDMMC slot) | Reset the board to run the application | LED indicates the success or failure. | LED toggles with 1 second delay if the demo executes successfully | LED turns on and stays on if the demo executes with error | . | . Refer to the following table for LED name: . | Board | LED Name | . | SAMA5D2 Xplained Ultra Evaluation Kit | RGB_LED(Green) | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/spi_flash/at25df/at25df_flash_read_write/readme.html#running-the-application",
    "relUrl": "/apps/driver/spi_flash/at25df/at25df_flash_read_write/readme.html#running-the-application"
  },"98": {
    "doc": "SPI Flash AT25DF - AT25DF flash read write",
    "title": "SPI Flash AT25DF - AT25DF flash read write",
    "content": ". ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/spi_flash/at25df/at25df_flash_read_write/readme.html",
    "relUrl": "/apps/driver/spi_flash/at25df/at25df_flash_read_write/readme.html"
  },"99": {
    "doc": "SQI flash MX25L driver - MX25L SQI read write",
    "title": "SQI flash MX25L driver - MX25L SQI read write",
    "content": "This example application shows how to use the MX25L QSPI flash driver to perform block operations on the on-board MX25L QSPI Flash memory. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/sqi_flash/mx25l/mx25l_flash_read_write/readme.html#sqi-flash-mx25l-driver---mx25l-sqi-read-write",
    "relUrl": "/apps/driver/sqi_flash/mx25l/mx25l_flash_read_write/readme.html#sqi-flash-mx25l-driver---mx25l-sqi-read-write"
  },"100": {
    "doc": "SQI flash MX25L driver - MX25L SQI read write",
    "title": "Description",
    "content": "This application uses the MX25L QSPI flash driver to Erase/Write/Read on the On-Board MX25L QSPI Flash memory using the QSPI peripheral library.The application consists of APP_Tasks() which is called through SYS_Tasks() routine. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/sqi_flash/mx25l/mx25l_flash_read_write/readme.html#description",
    "relUrl": "/apps/driver/sqi_flash/mx25l/mx25l_flash_read_write/readme.html#description"
  },"101": {
    "doc": "SQI flash MX25L driver - MX25L SQI read write",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/driver/sqi_flash/mx25l/mx25l_flash_read_write/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_a5d2_xult.X | MPLABX project for SAMA5D2 Xplained Ultra Evaluation Kit | . | sam_a5d2_xult_iar.IAR/mx25lx_flash_read_write_sam_a5d2_xult.eww/mx25lx_flash_read_write_sam_a5d2_xult.eww | IAR project for SAMA5D2 Xplained Ultra Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/sqi_flash/mx25l/mx25l_flash_read_write/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/driver/sqi_flash/mx25l/mx25l_flash_read_write/readme.html#downloading-and-building-the-application"
  },"102": {
    "doc": "SQI flash MX25L driver - MX25L SQI read write",
    "title": "Setting up AT91Bootstrap loader",
    "content": "To load the application binary onto the target device, we need to use at91bootstrap loader. Refer to the at91bootstrap loader documentation for details on how to configure, build and run bootstrap loader project and use it to bootstrap the application binaries. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/sqi_flash/mx25l/mx25l_flash_read_write/readme.html#setting-up-at91bootstrap-loader",
    "relUrl": "/apps/driver/sqi_flash/mx25l/mx25l_flash_read_write/readme.html#setting-up-at91bootstrap-loader"
  },"103": {
    "doc": "SQI flash MX25L driver - MX25L SQI read write",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_a5d2_xult.X sam_a5d2_xult_iar.IAR/mx25lx_flash_read_write_sam_a5d2_xult.eww/mx25lx_flash_read_write_sam_a5d2_xult.eww | SAMA5D2 Xplained Ultra Evaluation Kit | . |   |   | . Setting up SAMA5D2 Xplained Ultra Evaluation Kit . Addtional hardware required . | SD Card with FAT32 file system | . Setting up the SD Card . | Download harmony MPU bootstrap loader from this location | Copy the downloaded boot loader binary( boot.bin) onto the SD card | . Setting up the board . | SDMMC slot used for bootloading the application is SDMMC1 | Short jumper JP2 (DEBUG_DIS) | Connect the Debug USB port on the board to the computer using a micro USB cable | Make sure that the jumper JP9 is removed (jumper pins are not shorted) | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/sqi_flash/mx25l/mx25l_flash_read_write/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/driver/sqi_flash/mx25l/mx25l_flash_read_write/readme.html#setting-up-the-hardware"
  },"104": {
    "doc": "SQI flash MX25L driver - MX25L SQI read write",
    "title": "Running the Application",
    "content": ". | Build the application using its IDE | Copy the output binary (named ‘harmony.bin’) onto the SD Card (Refer to the ‘Setting up hardware’ section above for setting up the SD card) | Insert the SD card into SDMMC slot on the board (Refer to the ‘Setting up hardware’ section for the correct SDMMC slot) | Reset the board to run the application | LED indicates the success or failure. | LED toggles with 1 second delay if the demo executes successfully | LED turns on and stays on if the demo executes with error | . | . Refer to the following table for LED name: . | Board | LED Name | . | SAMA5D2 Xplained Ultra Evaluation Kit | RGB_LED(Green) | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/sqi_flash/mx25l/mx25l_flash_read_write/readme.html#running-the-application",
    "relUrl": "/apps/driver/sqi_flash/mx25l/mx25l_flash_read_write/readme.html#running-the-application"
  },"105": {
    "doc": "SQI flash MX25L driver - MX25L SQI read write",
    "title": "SQI flash MX25L driver - MX25L SQI read write",
    "content": ". ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/sqi_flash/mx25l/mx25l_flash_read_write/readme.html",
    "relUrl": "/apps/driver/sqi_flash/mx25l/mx25l_flash_read_write/readme.html"
  },"106": {
    "doc": "USART driver asynchronous - USART echo",
    "title": "USART driver asynchronous - USART echo",
    "content": "This example echoes the received characters over the console using the USART driver in asynchronous mode. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/usart/async/usart_echo/readme.html#usart-driver-asynchronous---usart-echo",
    "relUrl": "/apps/driver/usart/async/usart_echo/readme.html#usart-driver-asynchronous---usart-echo"
  },"107": {
    "doc": "USART driver asynchronous - USART echo",
    "title": "Description",
    "content": "This example uses the USART driver in asynchronous mode in Bare-Metal and RTOS environment to communicate over the console. It receives and echo’s back the characters entered by the user. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/usart/async/usart_echo/readme.html#description",
    "relUrl": "/apps/driver/usart/async/usart_echo/readme.html#description"
  },"108": {
    "doc": "USART driver asynchronous - USART echo",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/driver/usart/async/usart_echo/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_a5d27_som1_ek.X | MPLABX project for SAMA5D27-SOM1-EK1 | . | sam_a5d2_xult.X | MPLABX project for SAMA5D2 Xplained Ultra Evaluation Kit | . | sam_a5d2_xult_freertos.X | MPLABX project for SAMA5D2 Xplained Ultra Evaluation Kit | . | sam_a5d2_xult_freertos_iar.IAR/usart_echo_sam_a5d2_xult_freertos.eww/usart_echo_sam_a5d2_xult_freertos.eww | IAR project for SAMA5D2 Xplained Ultra Evaluation Kit | . | sam_a5d2_xult_iar.IAR/usart_echo_sam_a5d2_xult.eww/usart_echo_sam_a5d2_xult.eww | IAR project for SAMA5D2 Xplained Ultra Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/usart/async/usart_echo/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/driver/usart/async/usart_echo/readme.html#downloading-and-building-the-application"
  },"109": {
    "doc": "USART driver asynchronous - USART echo",
    "title": "Setting up AT91Bootstrap loader",
    "content": "To load the application binary onto the target device, we need to use at91bootstrap loader. Refer to the at91bootstrap loader documentation for details on how to configure, build and run bootstrap loader project and use it to bootstrap the application binaries. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/usart/async/usart_echo/readme.html#setting-up-at91bootstrap-loader",
    "relUrl": "/apps/driver/usart/async/usart_echo/readme.html#setting-up-at91bootstrap-loader"
  },"110": {
    "doc": "USART driver asynchronous - USART echo",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_a5d2_xult.X sam_a5d2_xult_freertos.X sam_a5d2_xult_freertos_iar.IAR/usart_echo_sam_a5d2_xult_freertos.eww/usart_echo_sam_a5d2_xult_freertos.eww sam_a5d2_xult_iar.IAR/usart_echo_sam_a5d2_xult.eww/usart_echo_sam_a5d2_xult.eww | SAMA5D2 Xplained Ultra Evaluation Kit | . | sam_a5d27_som1_ek.X | SAMA5D27-SOM1-EK1 | . |   |   | . Setting up SAMA5D27-SOM1-EK1 . Addtional hardware required . | SD Card with FAT32 file system | . Setting up the SD Card . | Download harmony MPU bootstrap loader from this location | Copy the downloaded boot loader binary( boot.bin) onto the SD card | . Setting up the board . | SDMMC slot used for bootloading the application is SDMMC1 | Short jumper JP2 (DEBUG_DIS) | Connect the Debug USB port on the board to the computer using a micro USB cable | . Setting up SAMA5D2 Xplained Ultra Evaluation Kit . Addtional hardware required . | SD Card with FAT32 file system | . Setting up the SD Card . | Download harmony MPU bootstrap loader from this location | Copy the downloaded boot loader binary( boot.bin) onto the SD card | . Setting up the board . | SDMMC slot used for bootloading the application is SDMMC1 | Short jumper JP2 (DEBUG_DIS) | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/usart/async/usart_echo/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/driver/usart/async/usart_echo/readme.html#setting-up-the-hardware"
  },"111": {
    "doc": "USART driver asynchronous - USART echo",
    "title": "Running the Application",
    "content": ". | Build the application using its IDE | Copy the output binary (named ‘harmony.bin’) onto the SD Card (Refer to the ‘Setting up hardware’ section above for setting up the SD card) | Insert the SD card into SDMMC slot on the board (Refer to the ‘Setting up hardware’ section for the correct SDMMC slot) | Open the Terminal application (Ex.:Tera term) on the computer. | Connect to the EDBG/Jlink Virtual COM port and configure the serial settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Reset the board to run the application | Type a character and observe the output on the console as shown below: . | LED toggles each time the character is echoed | . Refer to the following table for LED name: . | Board | LED Name | . | SAMA5D27-SOM1-EK1 | D5(Green) | . | SAMA5D2 Xplained Ultra Evaluation Kit | RGB_LED(Green) | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/usart/async/usart_echo/readme.html#running-the-application",
    "relUrl": "/apps/driver/usart/async/usart_echo/readme.html#running-the-application"
  },"112": {
    "doc": "USART driver asynchronous - USART echo",
    "title": "USART driver asynchronous - USART echo",
    "content": ". ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/usart/async/usart_echo/readme.html",
    "relUrl": "/apps/driver/usart/async/usart_echo/readme.html"
  },"113": {
    "doc": "USART driver asynchronous - USART multi instance",
    "title": "USART driver asynchronous - USART multi instance",
    "content": "This example echoes the received characters over the two consoles using the USART driver in asynchronous mode. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/usart/async/usart_multi_instance/readme.html#usart-driver-asynchronous---usart-multi-instance",
    "relUrl": "/apps/driver/usart/async/usart_multi_instance/readme.html#usart-driver-asynchronous---usart-multi-instance"
  },"114": {
    "doc": "USART driver asynchronous - USART multi instance",
    "title": "Description",
    "content": "This example uses the USART driver in asynchronous mode in both Bare-Metal and RTOS environments to communicate over two consoles. It receives and echoes back the characters entered by the user on the respective console. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/usart/async/usart_multi_instance/readme.html#description",
    "relUrl": "/apps/driver/usart/async/usart_multi_instance/readme.html#description"
  },"115": {
    "doc": "USART driver asynchronous - USART multi instance",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/driver/usart/async/usart_multi_instance/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_a5d2_xult.X | MPLABX project for SAMA5D2 Xplained Ultra Evaluation Kit | . | sam_a5d2_xult_freertos.X | MPLABX project for SAMA5D2 Xplained Ultra Evaluation Kit | . | sam_a5d2_xult_freertos_iar.IAR/usart_multi_instance_sam_a5d2_xult_freertos.eww/usart_multi_instance_sam_a5d2_xult_freertos.eww | IAR project for SAMA5D2 Xplained Ultra Evaluation Kit | . | sam_a5d2_xult_iar.IAR/usart_multi_instance_sam_a5d2_xult.eww/usart_multi_instance_sam_a5d2_xult.eww | IAR project for SAMA5D2 Xplained Ultra Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/usart/async/usart_multi_instance/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/driver/usart/async/usart_multi_instance/readme.html#downloading-and-building-the-application"
  },"116": {
    "doc": "USART driver asynchronous - USART multi instance",
    "title": "Setting up AT91Bootstrap loader",
    "content": "To load the application binary onto the target device, we need to use at91bootstrap loader. Refer to the at91bootstrap loader documentation for details on how to configure, build and run bootstrap loader project and use it to bootstrap the application binaries. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/usart/async/usart_multi_instance/readme.html#setting-up-at91bootstrap-loader",
    "relUrl": "/apps/driver/usart/async/usart_multi_instance/readme.html#setting-up-at91bootstrap-loader"
  },"117": {
    "doc": "USART driver asynchronous - USART multi instance",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_a5d2_xult.X sam_a5d2_xult_freertos.X sam_a5d2_xult_freertos_iar.IAR/usart_multi_instance_sam_a5d2_xult_freertos.eww/usart_multi_instance_sam_a5d2_xult_freertos.eww sam_a5d2_xult_iar.IAR/usart_multi_instance_sam_a5d2_xult.eww/usart_multi_instance_sam_a5d2_xult.eww | SAMA5D2 Xplained Ultra Evaluation Kit | . |   |   | . Setting up SAMA5D2 Xplained Ultra Evaluation Kit . Addtional hardware required . | SD Card with FAT32 file system | USB UART CLICK board | . Setting up the SD Card . | Download harmony MPU bootstrap loader from this location | Copy the downloaded boot loader binary( boot.bin) onto the SD card | . Setting up the board . | Connect USB UART CLICK board to the evaluation kit using the pin connections described below: . | SAM A5D2 Xplained Ultra board Pins | USB UART Click board Pins | . | F0_TXD, J22 connector | RX | . | F0_RXD, J22 connector | TX | . | PIN 20, XPRO EXT2 connector | 3.3V | . | PIN 19, XPRO EXT2 connector | GND | . | SDMMC slot used for bootloading the application is SDMMC1 | Short jumper JP2 (DEBUG_DIS) | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/usart/async/usart_multi_instance/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/driver/usart/async/usart_multi_instance/readme.html#setting-up-the-hardware"
  },"118": {
    "doc": "USART driver asynchronous - USART multi instance",
    "title": "Running the Application",
    "content": ". | Build the application using its IDE | Copy the output binary (named ‘harmony.bin’) onto the SD Card (Refer to the ‘Setting up hardware’ section above for setting up the SD card) | Insert the SD card into SDMMC slot on the board (Refer to the ‘Setting up hardware’ section for the correct SDMMC slot) | Open the Terminal application (Ex.:Tera term) on the computer for both ports | Connect to the EDBG/Jlink Virtual COM port and configure the serial settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Reset the board to run the application | Type a character and observe the output on the two consoles as shown below: . | If success the character typed echoes back and an LED toggles on each time the character is echoed | Console 1 | . | Console 2 | . | . Refer to the following table for LED name: . | Board | LED Name | . | SAMA5D2 Xplained Ultra Evaluation Kit | RGB_LED(Green) | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/usart/async/usart_multi_instance/readme.html#running-the-application",
    "relUrl": "/apps/driver/usart/async/usart_multi_instance/readme.html#running-the-application"
  },"119": {
    "doc": "USART driver asynchronous - USART multi instance",
    "title": "USART driver asynchronous - USART multi instance",
    "content": ". ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/usart/async/usart_multi_instance/readme.html",
    "relUrl": "/apps/driver/usart/async/usart_multi_instance/readme.html"
  },"120": {
    "doc": "USART driver synchronous - USART echo",
    "title": "USART driver synchronous - USART echo",
    "content": "This example echoes the received characters over the console using the USART driver in synchronous mode. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/usart/sync/usart_echo/readme.html#usart-driver-synchronous---usart-echo",
    "relUrl": "/apps/driver/usart/sync/usart_echo/readme.html#usart-driver-synchronous---usart-echo"
  },"121": {
    "doc": "USART driver synchronous - USART echo",
    "title": "Description",
    "content": "This example uses the USART driver in synchronous mode in RTOS environment to communicate over the console. It receives and echo’s back the characters entered by the user. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/usart/sync/usart_echo/readme.html#description",
    "relUrl": "/apps/driver/usart/sync/usart_echo/readme.html#description"
  },"122": {
    "doc": "USART driver synchronous - USART echo",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/driver/usart/sync/usart_echo/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_a5d27_som1_ek_freertos.X | MPLABX project for SAMA5D27-SOM1-EK1 | . | sam_a5d2_xult_freertos.X | MPLABX project for SAMA5D2 Xplained Ultra Evaluation Kit | . | sam_a5d2_xult_freertos_iar.IAR/usart_echo_freertos_sam_a5d2_xult_freertos.eww/usart_echo_freertos_sam_a5d2_xult_freertos.eww | IAR project for SAMA5D2 Xplained Ultra Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/usart/sync/usart_echo/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/driver/usart/sync/usart_echo/readme.html#downloading-and-building-the-application"
  },"123": {
    "doc": "USART driver synchronous - USART echo",
    "title": "Setting up AT91Bootstrap loader",
    "content": "To load the application binary onto the target device, we need to use at91bootstrap loader. Refer to the at91bootstrap loader documentation for details on how to configure, build and run bootstrap loader project and use it to bootstrap the application binaries. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/usart/sync/usart_echo/readme.html#setting-up-at91bootstrap-loader",
    "relUrl": "/apps/driver/usart/sync/usart_echo/readme.html#setting-up-at91bootstrap-loader"
  },"124": {
    "doc": "USART driver synchronous - USART echo",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_a5d2_xult_freertos.X sam_a5d2_xult_freertos_iar.IAR/usart_echo_freertos_sam_a5d2_xult_freertos.eww/usart_echo_freertos_sam_a5d2_xult_freertos.eww | SAMA5D2 Xplained Ultra Evaluation Kit | . | sam_a5d27_som1_ek_freertos.X | SAMA5D27-SOM1-EK1 | . |   |   | . Setting up SAMA5D27-SOM1-EK1 . Addtional hardware required . | SD Card with FAT32 file system | . Setting up the SD Card . | Download harmony MPU bootstrap loader from this location | Copy the downloaded boot loader binary( boot.bin) onto the SD card | . Setting up the board . | SDMMC slot used for bootloading the application is J12 | Connect the Debug USB port on the board to the computer using a micro USB cable | . Setting up SAMA5D2 Xplained Ultra Evaluation Kit . Addtional hardware required . | SD Card with FAT32 file system | . Setting up the SD Card . | Download harmony MPU bootstrap loader from this location | Copy the downloaded boot loader binary( boot.bin) onto the SD card | . Setting up the board . | SDMMC slot used for bootloading the application is SDMMC1 | Short jumper JP2 (DEBUG_DIS) | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/usart/sync/usart_echo/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/driver/usart/sync/usart_echo/readme.html#setting-up-the-hardware"
  },"125": {
    "doc": "USART driver synchronous - USART echo",
    "title": "Running the Application",
    "content": ". | Build the application using its IDE | Copy the output binary (named ‘harmony.bin’) onto the SD Card (Refer to the ‘Setting up hardware’ section above for setting up the SD card) | Insert the SD card into SDMMC slot on the board (Refer to the ‘Setting up hardware’ section for the correct SDMMC slot) | Open the Terminal application (Ex.:Tera term) on the computer. | Connect to the EDBG/Jlink Virtual COM port and configure the serial settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Reset the board to run the application | Type a character and observe the output on the console as shown below: . | LED toggles each time the character is echoed | . Refer to the following table for LED name: . | Board | LED Name | . | SAMA5D27-SOM1-EK1 | D5(Green) | . | SAMA5D2 Xplained Ultra Evaluation Kit | RGB_LED(Green) | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/usart/sync/usart_echo/readme.html#running-the-application",
    "relUrl": "/apps/driver/usart/sync/usart_echo/readme.html#running-the-application"
  },"126": {
    "doc": "USART driver synchronous - USART echo",
    "title": "USART driver synchronous - USART echo",
    "content": ". ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/usart/sync/usart_echo/readme.html",
    "relUrl": "/apps/driver/usart/sync/usart_echo/readme.html"
  },"127": {
    "doc": "USART driver synchronous - USART multi instance",
    "title": "USART driver synchronous - USART multi instance",
    "content": "This example echoes the received characters over the two consoles using the USART driver in synchronous mode. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/usart/sync/usart_multi_instance/readme.html#usart-driver-synchronous---usart-multi-instance",
    "relUrl": "/apps/driver/usart/sync/usart_multi_instance/readme.html#usart-driver-synchronous---usart-multi-instance"
  },"128": {
    "doc": "USART driver synchronous - USART multi instance",
    "title": "Description",
    "content": "This example uses the USART driver in synchronous mode RTOS environments to communicate over two consoles. It receives and echoes back the characters entered by the user on the respective console. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/usart/sync/usart_multi_instance/readme.html#description",
    "relUrl": "/apps/driver/usart/sync/usart_multi_instance/readme.html#description"
  },"129": {
    "doc": "USART driver synchronous - USART multi instance",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/driver/usart/sync/usart_multi_instance/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_a5d2_xult_freertos.X | MPLABX project for SAMA5D2 Xplained Ultra Evaluation Kit | . | sam_a5d2_xult_freertos_iar.IAR/usart_multi_instance_freertos_sam_a5d2_xult_freertos.eww/usart_multi_instance_freertos_sam_a5d2_xult_freertos.eww | IAR project for SAMA5D2 Xplained Ultra Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/usart/sync/usart_multi_instance/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/driver/usart/sync/usart_multi_instance/readme.html#downloading-and-building-the-application"
  },"130": {
    "doc": "USART driver synchronous - USART multi instance",
    "title": "Setting up AT91Bootstrap loader",
    "content": "To load the application binary onto the target device, we need to use at91bootstrap loader. Refer to the at91bootstrap loader documentation for details on how to configure, build and run bootstrap loader project and use it to bootstrap the application binaries. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/usart/sync/usart_multi_instance/readme.html#setting-up-at91bootstrap-loader",
    "relUrl": "/apps/driver/usart/sync/usart_multi_instance/readme.html#setting-up-at91bootstrap-loader"
  },"131": {
    "doc": "USART driver synchronous - USART multi instance",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_a5d2_xult_freertos.X sam_a5d2_xult_freertos_iar.IAR/usart_multi_instance_freertos_sam_a5d2_xult_freertos.eww/usart_multi_instance_freertos_sam_a5d2_xult_freertos.eww | SAMA5D2 Xplained Ultra Evaluation Kit | . |   |   | . Setting up SAMA5D2 Xplained Ultra Evaluation Kit . Addtional hardware required . | SD Card with FAT32 file system | USB UART CLICK board | . Setting up the SD Card . | Download harmony MPU bootstrap loader from this location | Copy the downloaded boot loader binary( boot.bin) onto the SD card | . Setting up the board . | Connect USB UART CLICK board to the evaluation kit using the pin connections described below: . | SAM A5D2 Xplained Ultra board Pins | USB UART Click board Pins | . | F0_TXD, J22 connector | RX | . | F0_RXD, J22 connector | TX | . | PIN 20, XPRO EXT2 connector | 3.3V | . | PIN 19, XPRO EXT2 connector | GND | . | SDMMC slot used for bootloading the application is SDMMC1 | Short jumper JP2 (DEBUG_DIS) | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/usart/sync/usart_multi_instance/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/driver/usart/sync/usart_multi_instance/readme.html#setting-up-the-hardware"
  },"132": {
    "doc": "USART driver synchronous - USART multi instance",
    "title": "Running the Application",
    "content": ". | Build the application using its IDE | Copy the output binary (named ‘harmony.bin’) onto the SD Card (Refer to the ‘Setting up hardware’ section above for setting up the SD card) | Insert the SD card into SDMMC slot on the board (Refer to the ‘Setting up hardware’ section for the correct SDMMC slot) | Open the Terminal application (Ex.:Tera term) on the computer for both ports | Connect to the EDBG/Jlink Virtual COM port and configure the serial settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Reset the board to run the application | Type ten characters and observe the output on the two consoles as shown below: . | If success, when ten characters are typed it will be echoed back on the console and LED is toggled every time the characters are echoed | Console 1 | . | Console 2 | . | . Refer to the following table for LED name: . | Board | LED Name | . | SAMA5D2 Xplained Ultra Evaluation Kit | RGB_LED(Green) | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/usart/sync/usart_multi_instance/readme.html#running-the-application",
    "relUrl": "/apps/driver/usart/sync/usart_multi_instance/readme.html#running-the-application"
  },"133": {
    "doc": "USART driver synchronous - USART multi instance",
    "title": "USART driver synchronous - USART multi instance",
    "content": ". ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/driver/usart/sync/usart_multi_instance/readme.html",
    "relUrl": "/apps/driver/usart/sync/usart_multi_instance/readme.html"
  },"134": {
    "doc": "FAT filesystem throughput using eMMC Media",
    "title": "FAT filesystem throughput using eMMC Media",
    "content": "This application calculates throughput by Writing and Reading data into a eMMC device at High Speed using the MPLAB Harmony File System and the SDMMC driver. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/fs/emmc_fat_throughput/readme.html#fat-filesystem-throughput-using-emmc-media",
    "relUrl": "/apps/fs/emmc_fat_throughput/readme.html#fat-filesystem-throughput-using-emmc-media"
  },"135": {
    "doc": "FAT filesystem throughput using eMMC Media",
    "title": "Description",
    "content": "Application performs below filesystem operations and throughput calculations on eMMC device using both Aligned and Unaligned buffers . | Checks if the eMMC card is having Valid File system. If not then it Formats the eMMC card to FAT32 | Opens a file named throughput.txt in the root directory of the eMMC device | Writes 10 Megabytes of data to file in chunks of 64 Kilobytes | Once the operation is completed it calculates the time taken and overall throughtput for write in Megabytes/second and displays on the console | Reads 10 Megabytes of data from file in chunks of 64 Kilobytes | Once the operation is completed it calculates the time taken and overall throughtput for reading in Megabytes/second and displays on the console | Closes the file once read is completed | Checks if the Above steps need to be repeated for Unaligned buffer. If already done then it Glows an LED reporting success and the console will have throughput information for both Aligned and Unaligned buffers. | . File system layer uses: . | SDMMC Driver to communicate to eMMC device | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/fs/emmc_fat_throughput/readme.html#description",
    "relUrl": "/apps/fs/emmc_fat_throughput/readme.html#description"
  },"136": {
    "doc": "FAT filesystem throughput using eMMC Media",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/fs/emmc_fat_throughput/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_a5d2_xult.X | MPLABX project for SAMA5D2 Xplained Ultra Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/fs/emmc_fat_throughput/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/fs/emmc_fat_throughput/readme.html#downloading-and-building-the-application"
  },"137": {
    "doc": "FAT filesystem throughput using eMMC Media",
    "title": "Setting up AT91Bootstrap loader",
    "content": "To load the application binary onto the target device, we need to use at91bootstrap loader. Refer to the at91bootstrap loader documentation for details on how to configure, build and run bootstrap loader project and use it to bootstrap the application binaries. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/fs/emmc_fat_throughput/readme.html#setting-up-at91bootstrap-loader",
    "relUrl": "/apps/fs/emmc_fat_throughput/readme.html#setting-up-at91bootstrap-loader"
  },"138": {
    "doc": "FAT filesystem throughput using eMMC Media",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_a5d2_xult.X | SAMA5D2 Xplained Ultra Evaluation Kit | . |   |   | . Setting up SAMA5D2 Xplained Ultra Evaluation Kit . Addtional hardware required . | SD Card with FAT32 file system | . Setting up the SD Card . | Download harmony MPU bootstrap loader from this location | Copy the downloaded boot loader binary( boot.bin) onto the SD card | . Setting up the board . | SDMMC slot used for bootloading the application is SDMMC1 | Short jumper JP2 (DEBUG_DIS) | Connect the Debug USB port on the board to the computer using a micro USB cable | Jumper JP9 (BOOT_DIS) should be open | . NOTE: To run this demo successfully, on board eMMC device should have a valid FAT partition . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/fs/emmc_fat_throughput/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/fs/emmc_fat_throughput/readme.html#setting-up-the-hardware"
  },"139": {
    "doc": "FAT filesystem throughput using eMMC Media",
    "title": "Running the Application",
    "content": ". | Build the application using its IDE | Copy the output binary (named ‘harmony.bin’) onto the SD Card (Refer to the ‘Setting up hardware’ section above for setting up the SD card) | Insert the SD card into SDMMC slot on the board (Refer to the ‘Setting up hardware’ section for the correct SDMMC slot) . | Open the Terminal application (Ex.:Tera term) on the computer. | Connect to the EDBG/Jlink Virtual COM port and configure the serial settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Reset the board to run the application | The LED is turned ON if there was no error during the file operations . Refer to the following table for LED name: . | Board | LED Name | . | SAMA5D2 Xplained Ultra Evaluation Kit | RGB_LED(Green) | . |   |   | . | Calculated throughput values for Aligned and Un-Aligned buffers are dispalyed on console as below: . | Note: The Values showed in the below output may differ slightly when demo is run | . | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/fs/emmc_fat_throughput/readme.html#running-the-application",
    "relUrl": "/apps/fs/emmc_fat_throughput/readme.html#running-the-application"
  },"140": {
    "doc": "FAT filesystem throughput using eMMC Media",
    "title": "Additional Steps (Optional)",
    "content": "To increase the throughput for the Un-aligned buffers you can follow below steps . | Launch MHC for the project . | Increase the size for the internal aligned buffer used by Filesystem service with some value as shown below. This internal buffer will be used when application buffer is Un-aligned and placed in cacheable region. | Note: Increasing the size of the aligned buffer will consume more RAM | . | Regenerate the project . | Once done repeat the steps mentioned in Running The Application and observe the change in throughput for Un-aligned buffer | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/fs/emmc_fat_throughput/readme.html#additional-steps-optional",
    "relUrl": "/apps/fs/emmc_fat_throughput/readme.html#additional-steps-optional"
  },"141": {
    "doc": "FAT filesystem throughput using eMMC Media",
    "title": "FAT filesystem throughput using eMMC Media",
    "content": ". ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/fs/emmc_fat_throughput/readme.html",
    "relUrl": "/apps/fs/emmc_fat_throughput/readme.html"
  },"142": {
    "doc": "FAT filesystem using EMMC media",
    "title": "FAT filesystem using EMMC media",
    "content": "This application shows an example of using the FAT filesystem to access and modify the contents of a eMMC device using contents from SD card. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/fs/emmc_sdmmc_fat_multi_disk/readme.html#fat-filesystem-using-emmc-media",
    "relUrl": "/apps/fs/emmc_sdmmc_fat_multi_disk/readme.html#fat-filesystem-using-emmc-media"
  },"143": {
    "doc": "FAT filesystem using EMMC media",
    "title": "Description",
    "content": "Following file system operations are performed by this application: . | Application checks if the eMMC card is having Valid File system. If not then it Formats the eMMC card to FAT32 | Application reads a file with name FILE_TOO_LONG_NAME_EXAMPLE_123.JPG in the root directory of SD-card media | Application then creates a new directory in the root directory of EMMC media with the name Dir1 | Application creates a new file in the directory Dir1 in the eMMC media with name FILE_TOO_LONG_NAME_EXAMPLE_123.JPG | Application writes the content it read from step 1 into the newly created file | Application creates a new directory in root directory of the SD Card filesystem | Application copies the file (by following steps above) from eMMC/Dir1 to sdcard/Dir1 | . The reason for choosing a JPEG file for test purposes is that the duplicate file, Dir1/FILE_TOO_LONG_NAME_EXAMPLE_123.JPG created by the demonstration could be easily verified for correctness. If the new file inside Dir1 opens for viewing on the computer and matches to original image, the test is deemed to have passed. Otherwise, if the file does not open (i.e., is corrupted), the test will be considered to have failed. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/fs/emmc_sdmmc_fat_multi_disk/readme.html#description",
    "relUrl": "/apps/fs/emmc_sdmmc_fat_multi_disk/readme.html#description"
  },"144": {
    "doc": "FAT filesystem using EMMC media",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/fs/emmc_sdmmc_fat_multi_disk/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_a5d2_xult.X | MPLABX project for SAMA5D2 Xplained Ultra Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/fs/emmc_sdmmc_fat_multi_disk/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/fs/emmc_sdmmc_fat_multi_disk/readme.html#downloading-and-building-the-application"
  },"145": {
    "doc": "FAT filesystem using EMMC media",
    "title": "Setting up AT91Bootstrap loader",
    "content": "To load the application binary onto the target device, we need to use at91bootstrap loader. Refer to the at91bootstrap loader documentation for details on how to configure, build and run bootstrap loader project and use it to bootstrap the application binaries. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/fs/emmc_sdmmc_fat_multi_disk/readme.html#setting-up-at91bootstrap-loader",
    "relUrl": "/apps/fs/emmc_sdmmc_fat_multi_disk/readme.html#setting-up-at91bootstrap-loader"
  },"146": {
    "doc": "FAT filesystem using EMMC media",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_a5d2_xult.X | SAMA5D2 Xplained Ultra Evaluation Kit | . |   |   | . Setting up SAMA5D2 Xplained Ultra Evaluation Kit . Addtional hardware required . | SD Card with FAT32 file system | . Setting up the SD Card . | Download harmony MPU bootstrap loader from this location | Copy the downloaded boot loader binary( boot.bin) onto the SD card | Create a new JPEG file in the SD Card with name FILE_TOO_LONG_NAME_EXAMPLE_123.JPG | . Setting up the board . | SDMMC slot used for bootloading the application is SDMMC1 | Short jumper JP2 (DEBUG_DIS) | Connect the Debug USB port on the board to the computer using a micro USB cable | Jumper JP9 (BOOT_DIS) should be open | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/fs/emmc_sdmmc_fat_multi_disk/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/fs/emmc_sdmmc_fat_multi_disk/readme.html#setting-up-the-hardware"
  },"147": {
    "doc": "FAT filesystem using EMMC media",
    "title": "Running the Application",
    "content": ". | NOTE: To run this demo successfully, on board eMMC device should have a valid FAT partition | Build the application using its IDE | Copy the output binary (named ‘harmony.bin’) onto the SD Card (Refer to the ‘Setting up hardware’ section above for setting up the SD card) | Insert the SD card into SDMMC slot on the board (Refer to the ‘Setting up hardware’ section for the correct SDMMC slot) | Reset the board to run the application | The LED is turned ON if there was no error during creating the directory and copying the file into it | . Refer to the following table for LED name: . | Board | LED Name | . | SAMA5D2 Xplained Ultra Evaluation Kit | RGB_LED(Green) | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/fs/emmc_sdmmc_fat_multi_disk/readme.html#running-the-application",
    "relUrl": "/apps/fs/emmc_sdmmc_fat_multi_disk/readme.html#running-the-application"
  },"148": {
    "doc": "FAT filesystem using EMMC media",
    "title": "FAT filesystem using EMMC media",
    "content": ". ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/fs/emmc_sdmmc_fat_multi_disk/readme.html",
    "relUrl": "/apps/fs/emmc_sdmmc_fat_multi_disk/readme.html"
  },"149": {
    "doc": "FAT filesystem using SDMMC Media",
    "title": "FAT filesystem using SDMMC Media",
    "content": "This application shows an example of using the MPLAB Harmony File System to access and modify the contents of a SD card using the SDMMC driver. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/fs/sdmmc_fat/readme.html#fat-filesystem-using-sdmmc-media",
    "relUrl": "/apps/fs/sdmmc_fat/readme.html#fat-filesystem-using-sdmmc-media"
  },"150": {
    "doc": "FAT filesystem using SDMMC Media",
    "title": "Description",
    "content": "File System Operations on the SD Card: . | Application opens a file named FILE_TOO_LONG_NAME_EXAMPLE_123.JPG in the root directory of the SD card and reads its content into memory . | The image file could be any arbitrary JPEG (image) file chosen by the user and then renamed to FILE_TOO_LONG_NAME_EXAMPLE_123.JPG | . | Application creates directory named Dir1 in the root directory | Application creates a new file named FILE_TOO_LONG_NAME_EXAMPLE_123.JPG inside Dir1 | Application copies the content from step 1 into this newly created file | . The reason for choosing a JPEG file for test purposes is that the duplicate file, Dir1/FILE_TOO_LONG_NAME_EXAMPLE_123.JPG created by the demonstration could be easily verified for correctness.If the new file inside Dir1 opens for viewing on the computer and matches to original image, the test is deemed to have passed. Otherwise, if the file does not open (i.e., is corrupted), the test will be considered to have failed. Note: . Since the application creates a directory named Dir1, it is important that the a folder with the same name does not exist on the SD card. If a directory named Dir1 is already present on the SD card, the application will fail. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/fs/sdmmc_fat/readme.html#description",
    "relUrl": "/apps/fs/sdmmc_fat/readme.html#description"
  },"151": {
    "doc": "FAT filesystem using SDMMC Media",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/fs/sdmmc_fat/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_a5d27_som1_ek_freertos.X | MPLABX project for SAMA5D27-SOM1-EK1 | . | sam_a5d2_xult.X | MPLABX project for SAMA5D2 Xplained Ultra Evaluation Kit | . | sam_a5d2_xult_freertos.X | MPLABX project for SAMA5D2 Xplained Ultra Evaluation Kit | . | sam_a5d2_xult_freertos_iar.IAR/sdmmc_fat_sam_a5d2_xult_freertos.eww/sdmmc_fat_sam_a5d2_xult_freertos.eww | IAR project for SAMA5D2 Xplained Ultra Evaluation Kit | . | sam_a5d2_xult_iar.IAR/sdmmc_fat_sam_a5d2_xult.eww/sdmmc_fat_sam_a5d2_xult.eww | IAR project for SAMA5D2 Xplained Ultra Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/fs/sdmmc_fat/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/fs/sdmmc_fat/readme.html#downloading-and-building-the-application"
  },"152": {
    "doc": "FAT filesystem using SDMMC Media",
    "title": "Setting up AT91Bootstrap loader",
    "content": "To load the application binary onto the target device, we need to use at91bootstrap loader. Refer to the at91bootstrap loader documentation for details on how to configure, build and run bootstrap loader project and use it to bootstrap the application binaries. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/fs/sdmmc_fat/readme.html#setting-up-at91bootstrap-loader",
    "relUrl": "/apps/fs/sdmmc_fat/readme.html#setting-up-at91bootstrap-loader"
  },"153": {
    "doc": "FAT filesystem using SDMMC Media",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_a5d2_xult.X sam_a5d2_xult_freertos.X sam_a5d2_xult_freertos_iar.IAR/sdmmc_fat_sam_a5d2_xult_freertos.eww/sdmmc_fat_sam_a5d2_xult_freertos.eww sam_a5d2_xult_iar.IAR/sdmmc_fat_sam_a5d2_xult.eww/sdmmc_fat_sam_a5d2_xult.eww | SAMA5D2 Xplained Ultra Evaluation Kit | . | sam_a5d27_som1_ek_freertos.X | SAMA5D27-SOM1-EK1 | . |   |   | . Setting up SAMA5D27-SOM1-EK1 . Addtional hardware required . | SD Card with FAT32 file system | . Setting up the SD Card . | Download harmony MPU bootstrap loader from this location | Copy the downloaded boot loader binary( boot.bin) onto the SD card | Create a new JPEG file in the SD Card with name FILE_TOO_LONG_NAME_EXAMPLE_123.JPG | . Setting up the board . | SDMMC slot used for bootloading the application is SDMMC1 | Connect the Debug USB port on the board to the computer using a micro USB cable | . Setting up SAMA5D2 Xplained Ultra Evaluation Kit . Addtional hardware required . | SD Card with FAT32 file system | . Setting up the SD Card . | Download harmony MPU bootstrap loader from this location | Copy the downloaded boot loader binary( boot.bin) onto the SD card | Create a new JPEG file in the SD Card with name FILE_TOO_LONG_NAME_EXAMPLE_123.JPG | . Setting up the board . | SDMMC slot used for bootloading the application is SDMMC1 | Short jumper JP2 (DEBUG_DIS) | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/fs/sdmmc_fat/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/fs/sdmmc_fat/readme.html#setting-up-the-hardware"
  },"154": {
    "doc": "FAT filesystem using SDMMC Media",
    "title": "Running the Application",
    "content": ". | Build the application using its IDE | Copy the output binary (named ‘harmony.bin’) onto the SD Card (Refer to the ‘Setting up hardware’ section above for setting up the SD card) | Insert the SD card into SDMMC slot on the board (Refer to the ‘Setting up hardware’ section for the correct SDMMC slot) | Reset the board to run the application | The LED is turned ON if there was no error during creating the directory and copying the file into it | . Refer to the following table for LED name: . | Board | LED Name | . | SAMA5D27-SOM1-EK1 | D5(Green) | . | SAMA5D2 Xplained Ultra Evaluation Kit | RGB_LED(Green) | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/fs/sdmmc_fat/readme.html#running-the-application",
    "relUrl": "/apps/fs/sdmmc_fat/readme.html#running-the-application"
  },"155": {
    "doc": "FAT filesystem using SDMMC Media",
    "title": "FAT filesystem using SDMMC Media",
    "content": ". ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/fs/sdmmc_fat/readme.html",
    "relUrl": "/apps/fs/sdmmc_fat/readme.html"
  },"156": {
    "doc": "FAT filesystem throughput using SDMMC Media",
    "title": "FAT filesystem throughput using SDMMC Media",
    "content": "This application calculates throughput by Writing and Reading data into a Sd-Card at High Speed using the MPLAB Harmony File System and the SDMMC driver. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/fs/sdmmc_fat_throughput/readme.html#fat-filesystem-throughput-using-sdmmc-media",
    "relUrl": "/apps/fs/sdmmc_fat_throughput/readme.html#fat-filesystem-throughput-using-sdmmc-media"
  },"157": {
    "doc": "FAT filesystem throughput using SDMMC Media",
    "title": "Description",
    "content": "Application performs below filesystem operations and throughput calculations on SD-Card using both Aligned and Unaligned buffers . | Opens a file named throughput.txt in the root directory of the SD card | Writes 10 Megabytes of data to file in chunks of 64 Kilobytes | Once the operation is completed it calculates the time taken and overall throughtput for write in Megabytes/second and displays on the console | Reads 10 Megabytes of data from file in chunks of 64 Kilobytes | Once the operation is completed it calculates the time taken and overall throughtput for reading in Megabytes/second and displays on the console | Closes the file once read is completed | Checks if the Above steps need to be repeated for Unaligned buffer. If already done then it Glows an LED reporting success and the console will have throughput information for both Aligned and Unaligned buffers. | . File system layer uses: . | SDMMC Driver to communicate to SD Card | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/fs/sdmmc_fat_throughput/readme.html#description",
    "relUrl": "/apps/fs/sdmmc_fat_throughput/readme.html#description"
  },"158": {
    "doc": "FAT filesystem throughput using SDMMC Media",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/fs/sdmmc_fat_throughput/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_a5d2_xult.X | MPLABX project for SAMA5D2 Xplained Ultra Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/fs/sdmmc_fat_throughput/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/fs/sdmmc_fat_throughput/readme.html#downloading-and-building-the-application"
  },"159": {
    "doc": "FAT filesystem throughput using SDMMC Media",
    "title": "Setting up AT91Bootstrap loader",
    "content": "To load the application binary onto the target device, we need to use at91bootstrap loader. Refer to the at91bootstrap loader documentation for details on how to configure, build and run bootstrap loader project and use it to bootstrap the application binaries. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/fs/sdmmc_fat_throughput/readme.html#setting-up-at91bootstrap-loader",
    "relUrl": "/apps/fs/sdmmc_fat_throughput/readme.html#setting-up-at91bootstrap-loader"
  },"160": {
    "doc": "FAT filesystem throughput using SDMMC Media",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_a5d2_xult.X | SAMA5D2 Xplained Ultra Evaluation Kit | . |   |   | . Setting up SAMA5D2 Xplained Ultra Evaluation Kit . Addtional hardware required . | SD Card with FAT32 file system . | The SD Card should have atleast 10MB of free space for the demo to work | . | . Setting up the SD Card . | Download harmony MPU bootstrap loader from this location | Copy the downloaded boot loader binary( boot.bin) onto the SD card | . Setting up the board . | SDMMC slot used for bootloading the application is SDMMC1 | Short jumper JP2 (DEBUG_DIS) | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/fs/sdmmc_fat_throughput/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/fs/sdmmc_fat_throughput/readme.html#setting-up-the-hardware"
  },"161": {
    "doc": "FAT filesystem throughput using SDMMC Media",
    "title": "Running the Application",
    "content": ". | Build the application using its IDE | Copy the output binary (named ‘harmony.bin’) onto the SD Card (Refer to the ‘Setting up hardware’ section above for setting up the SD card) | Insert the SD card into SDMMC slot on the board (Refer to the ‘Setting up hardware’ section for the correct SDMMC slot) . | Open the Terminal application (Ex.:Tera term) on the computer. | Connect to the EDBG/Jlink Virtual COM port and configure the serial settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Reset the board to run the application | The LED is turned ON if there was no error during the file operations . Refer to the following table for LED name: . | Board | LED Name | . | SAMA5D2 Xplained Ultra Evaluation Kit | RGB_LED(Green) | . |   |   | . | Calculated throughput values for Aligned and Un-Aligned buffers are dispalyed on console as below: . | Note: The Values showed in the below output may differ slightly when demo is run | . | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/fs/sdmmc_fat_throughput/readme.html#running-the-application",
    "relUrl": "/apps/fs/sdmmc_fat_throughput/readme.html#running-the-application"
  },"162": {
    "doc": "FAT filesystem throughput using SDMMC Media",
    "title": "Additional Steps (Optional)",
    "content": "To increase the throughput for the Un-aligned buffers you can follow below steps . | Launch MHC for the project . | Increase the size for the internal aligned buffer used by Filesystem service with some value as shown below. This internal buffer will be used when application buffer is Un-aligned and placed in cacheable region. | Note: Increasing the size of the aligned buffer will consume more RAM | . | Regenerate the project . | Once done repeat the steps mentioned in Running The Application and observe the change in throughput for Un-aligned buffer | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/fs/sdmmc_fat_throughput/readme.html#additional-steps-optional",
    "relUrl": "/apps/fs/sdmmc_fat_throughput/readme.html#additional-steps-optional"
  },"163": {
    "doc": "FAT filesystem throughput using SDMMC Media",
    "title": "FAT filesystem throughput using SDMMC Media",
    "content": ". ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/fs/sdmmc_fat_throughput/readme.html",
    "relUrl": "/apps/fs/sdmmc_fat_throughput/readme.html"
  },"164": {
    "doc": "FAT filesystem using SPI flash media",
    "title": "FAT filesystem using SPI flash media",
    "content": "This application shows an example of using the MPLAB Harmony File System to access and modify the contents of a flash memory using SPI Flash driver. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/fs/spi_flash_fat/readme.html#fat-filesystem-using-spi-flash-media",
    "relUrl": "/apps/fs/spi_flash_fat/readme.html#fat-filesystem-using-spi-flash-media"
  },"165": {
    "doc": "FAT filesystem using SPI flash media",
    "title": "Description",
    "content": "File System Operations on the On-Board SPI Flash Memory . | Performs a SYS-FS_FormatDisk | Opens a newfile.txt on the at25df flash | Write and reads back 4KB of data on newfile.txt | Verifies the Data Read back | . File system layer uses . Memory driver to communicate with the On-Board SPI Flash Memory . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/fs/spi_flash_fat/readme.html#description",
    "relUrl": "/apps/fs/spi_flash_fat/readme.html#description"
  },"166": {
    "doc": "FAT filesystem using SPI flash media",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/fs/spi_flash_fat/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_a5d2_xult.X | MPLABX project for SAMA5D2 Xplained Ultra Evaluation Kit | . | sam_a5d2_xult_freertos.X | MPLABX project for SAMA5D2 Xplained Ultra Evaluation Kit | . | sam_a5d2_xult_freertos_iar.IAR/at25df_fat_sam_a5d2_xult_freertos.eww/at25df_fat_sam_a5d2_xult_freertos.eww | IAR project for SAMA5D2 Xplained Ultra Evaluation Kit | . | sam_a5d2_xult_iar.IAR/at25df_fat_sam_a5d2_xult.eww/at25df_fat_sam_a5d2_xult.eww | IAR project for SAMA5D2 Xplained Ultra Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/fs/spi_flash_fat/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/fs/spi_flash_fat/readme.html#downloading-and-building-the-application"
  },"167": {
    "doc": "FAT filesystem using SPI flash media",
    "title": "Setting up AT91Bootstrap loader",
    "content": "To load the application binary onto the target device, we need to use at91bootstrap loader. Refer to the at91bootstrap loader documentation for details on how to configure, build and run bootstrap loader project and use it to bootstrap the application binaries. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/fs/spi_flash_fat/readme.html#setting-up-at91bootstrap-loader",
    "relUrl": "/apps/fs/spi_flash_fat/readme.html#setting-up-at91bootstrap-loader"
  },"168": {
    "doc": "FAT filesystem using SPI flash media",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_a5d2_xult.X sam_a5d2_xult_freertos.X sam_a5d2_xult_freertos_iar.IAR/at25df_fat_sam_a5d2_xult_freertos.eww/at25df_fat_sam_a5d2_xult_freertos.eww sam_a5d2_xult_iar.IAR/at25df_fat_sam_a5d2_xult.eww/at25df_fat_sam_a5d2_xult.eww | SAMA5D2 Xplained Ultra Evaluation Kit | . |   |   | . Setting up SAMA5D2 Xplained Ultra Evaluation Kit . Addtional hardware required . | SD Card with FAT32 file system | . Setting up the SD Card . | Download harmony MPU bootstrap loader from this location | Copy the downloaded boot loader binary( boot.bin) onto the SD card | . Setting up the board . | SDMMC slot used for bootloading the application is SDMMC1 | Short jumper JP2 (DEBUG_DIS) | Connect the Debug USB port on the board to the computer using a micro USB cable | Make sure that the jumper JP9 is removed (jumper pins are not shorted) | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/fs/spi_flash_fat/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/fs/spi_flash_fat/readme.html#setting-up-the-hardware"
  },"169": {
    "doc": "FAT filesystem using SPI flash media",
    "title": "Running the Application",
    "content": ". | Build the application using its IDE | Copy the output binary (named ‘harmony.bin’) onto the SD Card (Refer to the ‘Setting up hardware’ section above for setting up the SD card) | Insert the SD card into SDMMC slot on the board (Refer to the ‘Setting up hardware’ section for the correct SDMMC slot) | Reset the board to run the application | The LED is turned ON if data has successfully been written and read back from file “newfile.txt” | . Refer to the following table for LED name: . | Board | LED Name | . | SAMA5D2 Xplained Ultra Evaluation Kit | RGB_LED(Green) | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/fs/spi_flash_fat/readme.html#running-the-application",
    "relUrl": "/apps/fs/spi_flash_fat/readme.html#running-the-application"
  },"170": {
    "doc": "FAT filesystem using SPI flash media",
    "title": "FAT filesystem using SPI flash media",
    "content": ". ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/fs/spi_flash_fat/readme.html",
    "relUrl": "/apps/fs/spi_flash_fat/readme.html"
  },"171": {
    "doc": "FAT filesystem using MX25L Media",
    "title": "FAT filesystem using MX25L Media",
    "content": "This application shows an example of using the MPLAB Harmony File System to access SQI based MX25L flash media. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/fs/sqi_flash_fat/readme.html#fat-filesystem-using-mx25l-media",
    "relUrl": "/apps/fs/sqi_flash_fat/readme.html#fat-filesystem-using-mx25l-media"
  },"172": {
    "doc": "FAT filesystem using MX25L Media",
    "title": "Description",
    "content": "File System Operations on the On-Board MX25L Flash Memory . | Performs a SYS_FS_FormatDisk | Opens a newfile.txt on the MX25L flash | Write and reads back 4KB of data on newfile.txt | Verifies the Data Read back | . File system layer uses the following components . | One instance of the Memory driver is used to communicate with the On-Board SQI Flash memory | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/fs/sqi_flash_fat/readme.html#description",
    "relUrl": "/apps/fs/sqi_flash_fat/readme.html#description"
  },"173": {
    "doc": "FAT filesystem using MX25L Media",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/fs/sqi_flash_fat/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_a5d2_xult.X | MPLABX project for SAMA5D2 Xplained Ultra Evaluation Kit | . | sam_a5d2_xult_freertos.X | MPLABX project for SAMA5D2 Xplained Ultra Evaluation Kit | . | sam_a5d2_xult_freertos_iar.IAR/mx25l_fat_sam_a5d2_xult_freertos.eww/mx25l_fat_sam_a5d2_xult_freertos.eww | IAR project for SAMA5D2 Xplained Ultra Evaluation Kit | . | sam_a5d2_xult_iar.IAR/mx25l_fat_sam_a5d2_xult.eww/mx25l_fat_sam_a5d2_xult.eww | IAR project for SAMA5D2 Xplained Ultra Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/fs/sqi_flash_fat/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/fs/sqi_flash_fat/readme.html#downloading-and-building-the-application"
  },"174": {
    "doc": "FAT filesystem using MX25L Media",
    "title": "Setting up AT91Bootstrap loader",
    "content": "To load the application binary onto the target device, we need to use at91bootstrap loader. Refer to the at91bootstrap loader documentation for details on how to configure, build and run bootstrap loader project and use it to bootstrap the application binaries. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/fs/sqi_flash_fat/readme.html#setting-up-at91bootstrap-loader",
    "relUrl": "/apps/fs/sqi_flash_fat/readme.html#setting-up-at91bootstrap-loader"
  },"175": {
    "doc": "FAT filesystem using MX25L Media",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_a5d2_xult.X sam_a5d2_xult_freertos.X sam_a5d2_xult_freertos_iar.IAR/mx25l_fat_sam_a5d2_xult_freertos.eww/mx25l_fat_sam_a5d2_xult_freertos.eww sam_a5d2_xult_iar.IAR/mx25l_fat_sam_a5d2_xult.eww/mx25l_fat_sam_a5d2_xult.eww | SAMA5D2 Xplained Ultra Evaluation Kit | . |   |   | . Setting up SAMA5D2 Xplained Ultra Evaluation Kit . Addtional hardware required . | SD Card with FAT32 file system | . Setting up the SD Card . | Download harmony MPU bootstrap loader from this location | Copy the downloaded boot loader binary( boot.bin) onto the SD card | . Setting up the board . | SDMMC slot used for bootloading the application is SDMMC1 | Short jumper JP2 (DEBUG_DIS) | Connect the Debug USB port on the board to the computer using a micro USB cable | Make sure that the jumper JP9 is removed (jumper pins are not shorted) | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/fs/sqi_flash_fat/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/fs/sqi_flash_fat/readme.html#setting-up-the-hardware"
  },"176": {
    "doc": "FAT filesystem using MX25L Media",
    "title": "Running the Application",
    "content": ". | Build the application using its IDE | Copy the output binary (named ‘harmony.bin’) onto the SD Card (Refer to the ‘Setting up hardware’ section above for setting up the SD card) | Insert the SD card into SDMMC slot on the board (Refer to the ‘Setting up hardware’ section for the correct SDMMC slot) | Reset the board to run the application | The LED is turned ON if data has successfully been written and read back from file “newfile.txt” | . Refer to the following table for LED name: . | Board | LED Name | . | SAMA5D2 Xplained Ultra Evaluation Kit | RGB_LED(Green) | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/fs/sqi_flash_fat/readme.html#running-the-application",
    "relUrl": "/apps/fs/sqi_flash_fat/readme.html#running-the-application"
  },"177": {
    "doc": "FAT filesystem using MX25L Media",
    "title": "FAT filesystem using MX25L Media",
    "content": ". ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/fs/sqi_flash_fat/readme.html",
    "relUrl": "/apps/fs/sqi_flash_fat/readme.html"
  },"178": {
    "doc": "FreeRTOS basic",
    "title": "FreeRTOS basic",
    "content": "This example application demonstrates context switching between four tasks of different priorites. Two tasks run periodically while the other two tasks are event driven. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/rtos/freertos/basic_freertos/readme.html#freertos-basic",
    "relUrl": "/apps/rtos/freertos/basic_freertos/readme.html#freertos-basic"
  },"179": {
    "doc": "FreeRTOS basic",
    "title": "Description",
    "content": "This demonstration creates four tasks each of differen priority. Task1 has the lowest priority, followed by Task2, Task3 and Task4 which has the highest priority. Task1 and Task2 run periodically. Task3 blocks until a character is received on UART terminal. Task3 registers a read callback with the UART PLIB and blcoks on a UART receive semaphore. The semaphore is given from the registered callback which is called when a character is receved on the terminal. Task4 blocks until a user switch is pressed. Task4 registers a callback for the switch press event with the PIO peripheral and then blocks on the switch press semaphore. The semaphore is given from the registered callback which is called when the switch is pressed. All the tasks print messages on the UART terminal to indicate tasks entry/exit. Since all the tasks use the same UART peripheral library, a mutex is used to guard the shared resource (UART ring buffer). | Task1: Task1 is configured for priority 1 (lowest of all the application tasks). The task1 runs for about 100 ticks and then blocks for 10 milliseconds. Each time task1 is run, it prints a message on the UART console “Tsk1-P1 &lt;-“ where, the &lt;- symbol indicates that task1 is running. Just before blocking it prints another message on the UART console “Tsk1-P1 -&gt;” where, the -&gt; symbol indicates that task1 is about to put itself into a blocked state. | Task2: Task2 is configured for priority 2. The task2 runs for about 10 ticks and then blocks for 250 milliseconds. Each time task2 is run, it prints a message on the UART console “Tsk2-P2 &lt;-“ where, the &lt;- symbol indicates that task2 is running. Just before blocking it prints another message on the UART console “Tsk2-P2 -&gt;” where, the -&gt; symbol indicates that task2 is about to put itself into a blocked state. | Task3: Task3 is configured for priority 3. It remains blocked on a semaphore which is released when a character is entered on the UART console. Once active, the task reads out the received characters and toggles LED if letter ‘L’ or ‘l’ is pressed. The task then runs for about 50 ticks, before again blocking itself until a new character is received. Each time task3 is run, it prints a message on the UART console “Tsk3-P3 &lt;-“ where, the &lt;- symbol indicates that task2 is running. Just before blocking it prints another message on the UART console “Tsk3-P3 -&gt;” where, the -&gt; symbol indicates that task3 is about to put itself into a blocked state. | Task4: Task4 is configured for priority 4 (highest of all the application tasks). It remains blocked on a semaphore which is released when a user switch is pressed. Once active, the task runs for about 10 ticks, before again blocking itself until the switch is pressed again. Each time task4 is run, it prints a message on the UART console “Tsk4-P4 &lt;-“ where, the &lt;- symbol indicates that task4 is running. Just before blocking it prints another message on the UART console “Tsk4-P4 -&gt;” where, the -&gt; symbol indicates that task4 is about to put itself into a blocked state. | . The following figure shows possible context switching between the tasks. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/rtos/freertos/basic_freertos/readme.html#description",
    "relUrl": "/apps/rtos/freertos/basic_freertos/readme.html#description"
  },"180": {
    "doc": "FreeRTOS basic",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/rtos/freertos/basic_freertos/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_a5d2_xult.X | MPLABX project for SAMA5D2 Xplained Ultra Evaluation Kit | . | sam_a5d2_xult_iar.IAR/basic_freertos_sam_a5d2_xult.eww/basic_freertos_sam_a5d2_xult.eww | IAR project for SAMA5D2 Xplained Ultra Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/rtos/freertos/basic_freertos/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/rtos/freertos/basic_freertos/readme.html#downloading-and-building-the-application"
  },"181": {
    "doc": "FreeRTOS basic",
    "title": "Setting up AT91Bootstrap loader",
    "content": "To load the application binary onto the target device, we need to use at91bootstrap loader. Refer to the at91bootstrap loader documentation for details on how to configure, build and run bootstrap loader project and use it to bootstrap the application binaries. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/rtos/freertos/basic_freertos/readme.html#setting-up-at91bootstrap-loader",
    "relUrl": "/apps/rtos/freertos/basic_freertos/readme.html#setting-up-at91bootstrap-loader"
  },"182": {
    "doc": "FreeRTOS basic",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_a5d2_xult.X sam_a5d2_xult_iar.IAR/basic_freertos_sam_a5d2_xult.eww/basic_freertos_sam_a5d2_xult.eww | SAMA5D2 Xplained Ultra Evaluation Kit | . |   |   | . Setting up SAMA5D2 Xplained Ultra Evaluation Kit . Addtional hardware required . | SD Card with FAT32 file system | . Setting up the SD Card . | Download harmony MPU bootstrap loader from this location | Copy the downloaded boot loader binary( boot.bin) onto the SD card | . Setting up the board . | SDMMC slot used for bootloading the application is SDMMC1 | Short jumper JP2 (DEBUG_DIS) | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/rtos/freertos/basic_freertos/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/rtos/freertos/basic_freertos/readme.html#setting-up-the-hardware"
  },"183": {
    "doc": "FreeRTOS basic",
    "title": "Running the Application",
    "content": ". | Open the Terminal application (Ex.:Tera Term) on the computer. | Connect to the EDBG Virtual COM port and configure the serial settings as follows: . Baud : 115200 . Data : 8 Bits . Parity : None . Stop : 1 Bit . Flow Control : None . | Build the application using its IDE | Copy the output binary (named ‘harmony.bin’) onto the SD Card (Refer to the ‘Setting up hardware’ section above for setting up the SD card) | Insert the SD card into SDMMC slot on the board (Refer to the ‘Setting up hardware’ section for the correct SDMMC slot) | Reset the board to run the application | Observe the following output on the terminal. | Enter any character on the terminal to run task3. Notice how task1 and task2 are pre-empted by task3 as task3 is of higher priority than task1 and task2. Pressing character ‘l’ or “L’ toggles the on board LED. Notice how task1 and task2 are not run when characters are entered continuously on the terminal. | Press the user switch on the board to run task4. Notice how task4 preempts all other tasks as it is of highest priority. | . Refer to the following table for LED and Switch name: . | Board | LED Name | Switch Name | . | SAMA5D2 Xplained Ultra Evaluation Kit | RGB_LED(Green) | PB_USER | . |   |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/rtos/freertos/basic_freertos/readme.html#running-the-application",
    "relUrl": "/apps/rtos/freertos/basic_freertos/readme.html#running-the-application"
  },"184": {
    "doc": "FreeRTOS basic",
    "title": "FreeRTOS basic",
    "content": ". ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/rtos/freertos/basic_freertos/readme.html",
    "relUrl": "/apps/rtos/freertos/basic_freertos/readme.html"
  },"185": {
    "doc": "FreeRTOS Task Notification",
    "title": "FreeRTOS Task Notification",
    "content": "This example application is to illustrate the FreeRTOS Task Notification feature which is used as a light weight binary semaphore. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/rtos/freertos/task_notification_freertos/readme.html#freertos-task-notification",
    "relUrl": "/apps/rtos/freertos/task_notification_freertos/readme.html#freertos-task-notification"
  },"186": {
    "doc": "FreeRTOS Task Notification",
    "title": "Description",
    "content": ". | This demonstration creates two tasks that send notifications back and forth to each other. | Task2 blocks to wait for Task1 to notify and will be blocked for 500ms | Task1 sends a notification to Tasks2, bringing it out of the blocked state, toggles an LED | Task1 blocks to wait for Task2 to notify | Task2 sends notification to Task1, bringing it out of the blocked state | . | Above steps will be repeated. i.e. an LED toggles for every 500ms | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/rtos/freertos/task_notification_freertos/readme.html#description",
    "relUrl": "/apps/rtos/freertos/task_notification_freertos/readme.html#description"
  },"187": {
    "doc": "FreeRTOS Task Notification",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/rtos/freertos/task_notification_freertos/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_a5d2_xult.X | MPLABX project for SAMA5D2 Xplained Ultra Evaluation Kit | . | sam_a5d2_xult_iar.IAR/task_notification_freertos_sam_a5d2_xult.eww/task_notification_freertos_sam_a5d2_xult.eww | IAR project for SAMA5D2 Xplained Ultra Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/rtos/freertos/task_notification_freertos/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/rtos/freertos/task_notification_freertos/readme.html#downloading-and-building-the-application"
  },"188": {
    "doc": "FreeRTOS Task Notification",
    "title": "Setting up AT91Bootstrap loader",
    "content": "To load the application binary onto the target device, we need to use at91bootstrap loader. Refer to the at91bootstrap loader documentation for details on how to configure, build and run bootstrap loader project and use it to bootstrap the application binaries. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/rtos/freertos/task_notification_freertos/readme.html#setting-up-at91bootstrap-loader",
    "relUrl": "/apps/rtos/freertos/task_notification_freertos/readme.html#setting-up-at91bootstrap-loader"
  },"189": {
    "doc": "FreeRTOS Task Notification",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_a5d2_xult.X sam_a5d2_xult_iar.IAR/task_notification_freertos_sam_a5d2_xult.eww/task_notification_freertos_sam_a5d2_xult.eww | SAMA5D2 Xplained Ultra Evaluation Kit | . |   |   | . Setting up SAMA5D2 Xplained Ultra Evaluation Kit . Addtional hardware required . | SD Card with FAT32 file system | . Setting up the SD Card . | Download harmony MPU bootstrap loader from this location | Copy the downloaded boot loader binary( boot.bin) onto the SD card | . Setting up the board . | SDMMC slot used for bootloading the application is SDMMC1 | Short jumper JP2 (DEBUG_DIS) | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/rtos/freertos/task_notification_freertos/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/rtos/freertos/task_notification_freertos/readme.html#setting-up-the-hardware"
  },"190": {
    "doc": "FreeRTOS Task Notification",
    "title": "Running the Application",
    "content": ". | Build the application using its IDE | Copy the output binary (named ‘harmony.bin’) onto the SD Card (Refer to the ‘Setting up hardware’ section above for setting up the SD card) | Insert the SD card into SDMMC slot on the board (Refer to the ‘Setting up hardware’ section for the correct SDMMC slot) | Reset the board to run the application | The LED toggles on success for every 500ms | . Refer to the following table for LED name: . | Board | LED Name | . | SAMA5D2 Xplained Ultra Evaluation Kit | RGB_LED(Blue) | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/rtos/freertos/task_notification_freertos/readme.html#running-the-application",
    "relUrl": "/apps/rtos/freertos/task_notification_freertos/readme.html#running-the-application"
  },"191": {
    "doc": "FreeRTOS Task Notification",
    "title": "FreeRTOS Task Notification",
    "content": ". ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/rtos/freertos/task_notification_freertos/readme.html",
    "relUrl": "/apps/rtos/freertos/task_notification_freertos/readme.html"
  },"192": {
    "doc": "Time System Service multi-client",
    "title": "Time System Service multi-client",
    "content": "This example application demonstrates the multi-client system timer functionality. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/system/time/sys_time_multiclient/readme.html#time-system-service-multi-client",
    "relUrl": "/apps/system/time/sys_time_multiclient/readme.html#time-system-service-multi-client"
  },"193": {
    "doc": "Time System Service multi-client",
    "title": "Description",
    "content": ". | This application demonstrates timer functionality (with two clients to the Time System Service) by periodically printing a message on console every two seconds and blinking an LED every one second . | Delay, counter and single shot timer functionality is demonstrated on a switch press . | On a switch press, the application reads the current value of the 64 bit counter (say, count 1) | It then starts a delay of 500 milliseconds and waits for the delay to expire | Once the delay has expired, the application again reads the current value of the 64 bit counter (say, count 2) and calculates the difference between the two counter values . | The difference count indicates the time spent for the delay and is printed on the console as, “Delay time = x ms”, where x is the delay value and is equal to 500 milliseconds in the given example . | The application then starts a single shot timer of 100 milliseconds | When the single shot timer expires, a message is printed on the console that says “Single shot timer of 100 ms expired” | This message is printed only once on every switch press | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/system/time/sys_time_multiclient/readme.html#description",
    "relUrl": "/apps/system/time/sys_time_multiclient/readme.html#description"
  },"194": {
    "doc": "Time System Service multi-client",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/system/time/sys_time_multiclient/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | sam_a5d27_som1_ek_freertos.X | MPLABX project for SAMA5D27-SOM1-EK1 | . | sam_a5d2_xult_freertos.X | MPLABX project for SAMA5D2 Xplained Ultra Evaluation Kit | . | sam_a5d2_xult_freertos_iar.IAR/sys_time_multiclient_sam_a5d2_xult_freertos.eww/sys_time_multiclient_sam_a5d2_xult_freertos.eww | IAR project for SAMA5D2 Xplained Ultra Evaluation Kit | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/system/time/sys_time_multiclient/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/system/time/sys_time_multiclient/readme.html#downloading-and-building-the-application"
  },"195": {
    "doc": "Time System Service multi-client",
    "title": "Setting up AT91Bootstrap loader",
    "content": "To load the application binary onto the target device, we need to use at91bootstrap loader. Refer to the at91bootstrap loader documentation for details on how to configure, build and run bootstrap loader project and use it to bootstrap the application binaries. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/system/time/sys_time_multiclient/readme.html#setting-up-at91bootstrap-loader",
    "relUrl": "/apps/system/time/sys_time_multiclient/readme.html#setting-up-at91bootstrap-loader"
  },"196": {
    "doc": "Time System Service multi-client",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | sam_a5d2_xult_freertos.X sam_a5d2_xult_freertos_iar.IAR/sys_time_multiclient_sam_a5d2_xult_freertos.eww/sys_time_multiclient_sam_a5d2_xult_freertos.eww | SAMA5D2 Xplained Ultra Evaluation Kit | . | sam_a5d27_som1_ek_freertos.X | SAMA5D27-SOM1-EK1 | . |   |   | . Setting up SAMA5D27-SOM1-EK1 . Addtional hardware required . | SD Card with FAT32 file system | . Setting up the SD Card . | Download harmony MPU bootstrap loader from this location | Copy the downloaded boot loader binary( boot.bin) onto the SD card | . Setting up the board . | SDMMC slot used for bootloading the application is SDMMC1 | Connect the Debug USB port on the board to the computer using a micro USB cable | . Setting up SAMA5D2 Xplained Ultra Evaluation Kit . Addtional hardware required . | SD Card with FAT32 file system | . Setting up the SD Card . | Download harmony MPU bootstrap loader from this location | Copy the downloaded boot loader binary( boot.bin) onto the SD card | . Setting up the board . | SDMMC slot used for bootloading the application is SDMMC1 | Short jumper JP2 (DEBUG_DIS) | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/system/time/sys_time_multiclient/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/system/time/sys_time_multiclient/readme.html#setting-up-the-hardware"
  },"197": {
    "doc": "Time System Service multi-client",
    "title": "Running the Application",
    "content": ". | Build the application using its IDE | Copy the output binary (named ‘harmony.bin’) onto the SD Card (Refer to the ‘Setting up hardware’ section above for setting up the SD card) | Insert the SD card into SDMMC slot on the board (Refer to the ‘Setting up hardware’ section for the correct SDMMC slot) | Open the Terminal application (Ex.:Tera term) on the computer. | Connect to the EDBG/Jlink Virtual COM port and configure the serial settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Reset the board to run the application | Observe the following message getting printed on the console every two seconds . | Press the switch and observe the following output on the terminal (highlighted in red box) . | “Delay time = 500 ms” indicates the amount of time spent during the delay | “Single shot timer of 100 ms expired” is printed only once on every switch press | . | LED indicates the periodic timer functionality . | LED is toggled periodically every one second | . | . Refer to the following table for switch and LED name: . | Board | Switch Name | LED Name | . | SAMA5D27-SOM1-EK1 | USER | D5(Blue) | . | SAMA5D2 Xplained Ultra Evaluation Kit | PB_USER | RGB_LED(Blue) | . |   |   |   | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/system/time/sys_time_multiclient/readme.html#running-the-application",
    "relUrl": "/apps/system/time/sys_time_multiclient/readme.html#running-the-application"
  },"198": {
    "doc": "Time System Service multi-client",
    "title": "Time System Service multi-client",
    "content": ". ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/system/time/sys_time_multiclient/readme.html",
    "relUrl": "/apps/system/time/sys_time_multiclient/readme.html"
  },"199": {
    "doc": "Bootstrapping MPU applications using At91bootstrap loader",
    "title": "Bootstrapping MPU applications using At91bootstrap loader",
    "content": "MPU applications are linked to execute from external DRAM memory that is available on the evaluation kit. This require all peripherals and clock leading to the DRAM memory to be configured prior to the application being programmed. This is done using a bootstrap loader. Bootstrap loader project used for this purpose is a variant of the AT91Bootstrap project available for Microchip MPUs. It can be downloaded from here. This project is adapted to be used from within MPLABx IDE on both Windows and Linux. To facilitate the debugging and running of the MPU application, each application in this repository is bundled with its own copy of the AT91Bootstrap project. Each copy of the bootstrap project can be found under same folder as the application project and is named and is prefixed with “at91bootstrap_”. For eg: if the application folder name is sam_a5d2_xult.X, then bootstrap project folder will be named at91bootstrap_sam_a5d2_xult.X and will be present at the same folder level. Bootstrap project is configured to load and execute a raw binary file named “harmony.bin” from the SD card. SD card slot to be used shall vary with the evaluation kit. Each application project is configured with a post build step which will generate the necessary binary file named “harmony.bin” at the end of each build. If you are only interested in running or debugging the MPU applications in this repository , you can skip the following sections and and jump straight to Debugging MPU application using MPLABx. Each copy of the bootstrap project in this repository is preconfigured to the correct evaluation kit.Also, the bootstrap binary files required to program and run the applications are checked into the repository. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/docs/readme_bootstrap.html#bootstrapping-mpu-applications-using-at91bootstrap-loader",
    "relUrl": "/apps/docs/readme_bootstrap.html#bootstrapping-mpu-applications-using-at91bootstrap-loader"
  },"200": {
    "doc": "Bootstrapping MPU applications using At91bootstrap loader",
    "title": "Building AT91Bootstrap project",
    "content": ". | Bootstrap project can be configured using MPLABx using its KCONFIG menu. To do this, open the project in MPLABx, right click on the project and select “properties”. In categories, select “Kconfig” as shown below: . | Click on “LOAD” button and navigate to the boards folder inside the project. Choose the a default configuration file (defconfig) config file to select a target evaluation board and boot method . | For eg: If you want to boot harmony.bin file from sd card for SAMA5D27 evaluation kit, navigate to board/sama5d2_xplained folder and select “sama5d2_xplainedsd_harmony_defconfig” file | . | Click on “Apply” and “OK” buttons to configure the project . | Build the project to generate the bootstrap binaries . | Note: At91bootstrap project requires arm-gcc to build it. XC32 toolchain is not supported yet | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/docs/readme_bootstrap.html#building-at91bootstrap-project",
    "relUrl": "/apps/docs/readme_bootstrap.html#building-at91bootstrap-project"
  },"201": {
    "doc": "Bootstrapping MPU applications using At91bootstrap loader",
    "title": "Configure MPLABx application to use AT91Bootstrap loader",
    "content": "MPLABx debugger relies on AT91Bootstrap to configure the board before programming the application binaries. To configure an application to use AT91Bootstrap, follow the steps detailed below: . Configure a debug tool . | Right click on the application project and select properties. This will open the properties window. In the configuration option –&gt; connected hardware tools, select the debugger. Note: if no debugger is connected, click on the “show all” check box and select the supported debugger. Only Jlink options are supported . | Select the target toolchain and click on apply to save the changes . | This will result in an additional menu option to be available in the configuration tree view called “bootstrap” as shown below: . | . Configure bootstrap . | Click on “Use bootstrap” check box to enable bootstrap support . | Click on the “LOAD” button to load the bootstrap file. This will open a file picker, which allows you to choose the bootstrap binary file. | Navigate to the “binaries” folder under the AT91Bootstrap project folder. This contains the build output of the bootstrap project. You can either choose the “AT91Bootstrap.elf” file or “boot.bin” file . | If ELF file is choosen, the “Bootstrap entry address” and the “Bootstrap load address” text box can be left empty as this information can be read from the ELF file | If BIN file is chosen, the bootstrap entry address and the load address should be filled in their corresponding text boxes | An example configuration can be seen below. Here a relative path is used with respect to the project directory, to make the configuration portable . | . | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/docs/readme_bootstrap.html#configure-mplabx-application-to-use-at91bootstrap-loader",
    "relUrl": "/apps/docs/readme_bootstrap.html#configure-mplabx-application-to-use-at91bootstrap-loader"
  },"202": {
    "doc": "Bootstrapping MPU applications using At91bootstrap loader",
    "title": "Debugging MPU applications using MPLABx",
    "content": "Once the applicaton is configured to use bootstrap loader, debugging the application is as simple right clicking the application and selecting “Debug” option. This will cause debugger to perform a two stage loading: . Stage 1: Loads the bootstrap loader into the internal SRAM and executes it. This will configure the board specific peripherals and memory . Stage 2: Loads the application into the external DRAM and debugs it. User can perform actions like setting breakpoints, single-stepping etc. Debugging the applicaton using MPLABx has the following limitations: . | Running application using debugger is not supported | Call stack is not supported | Step in, step out using debugger does not work | . Note: Make sure that you reset the board between each debug sessions so that the debugger can attach to the target correctly . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/docs/readme_bootstrap.html#debugging-mpu-applications-using-mplabx",
    "relUrl": "/apps/docs/readme_bootstrap.html#debugging-mpu-applications-using-mplabx"
  },"203": {
    "doc": "Bootstrapping MPU applications using At91bootstrap loader",
    "title": "Running MPU applications",
    "content": "To run the applications, copy both the application binary named “harmony.bin” and the bootstrap binary named “boot.bin” onto an SD card. Insert the SD card into the SD slot of the evaluation kit and press the reset button. The ROM bootloader will copy the bootstrap binary “boot.bin” into the internal SRAM and executes it. The bootstrap will configure the external DRAM and the required peripherals, then copy the applicaton binary “harmony.bin” into the DRAM and executes it. ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/docs/readme_bootstrap.html#running-mpu-applications",
    "relUrl": "/apps/docs/readme_bootstrap.html#running-mpu-applications"
  },"204": {
    "doc": "Bootstrapping MPU applications using At91bootstrap loader",
    "title": "Bootstrapping MPU applications using At91bootstrap loader",
    "content": ". ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/apps/docs/readme_bootstrap.html",
    "relUrl": "/apps/docs/readme_bootstrap.html"
  },"205": {
    "doc": "Release notes",
    "title": "Microchip MPLAB® Harmony 3 Release Notes",
    "content": " ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/release_notes.html#microchip-mplab-harmony-3-release-notes",
    "relUrl": "/release_notes.html#microchip-mplab-harmony-3-release-notes"
  },"206": {
    "doc": "Release notes",
    "title": "Harmony 3 peripheral library application examples for SAM A5D2 family  v3.1.0",
    "content": "Development kit and demo application support . Following table provides number of peripheral library examples available for different development kits. | Development Kits | MPLABx applications | IAR applications | . | None | 43 | 0 | . | SAMA5D2 Xplained Ultra Evaluation Kit | 39 | 36 | . | SAMA5D27-SOM1-EK1 | 4 | 0 | . New Features . | None | . Known Issues . | SAMA5D2 family: SAMA5D2_DFP v1.5.53 or higher is required to correctly program and debug the application from within MPLABx 5.45 | . Development Tools . | MPLAB® X IDE v5.45 | MPLAB® X IDE plug-ins: . | MPLAB® Harmony Configurator (MHC) v3.7.0 | . | MPLAB® XC32 C/C++ Compiler v2.50 | IAR Embedded workbench for ARM v8.50 or above | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/release_notes.html#harmony-3-peripheral-library-application-examples-for-sam-a5d2-family--v310",
    "relUrl": "/release_notes.html#harmony-3-peripheral-library-application-examples-for-sam-a5d2-family--v310"
  },"207": {
    "doc": "Release notes",
    "title": "Harmony 3 driver and system service application examples for SAM A5D2 family  v3.0.1",
    "content": "New Features . | Added discover.microchip.com metadata | . Bug fixes . | Same as v3.0.0 | . Known Issues . | Same as v3.0.0 | . Development Tools . | Same as v3.0.0 | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/release_notes.html#harmony-3-driver-and-system-service-application-examples-for-sam-a5d2-family--v301",
    "relUrl": "/release_notes.html#harmony-3-driver-and-system-service-application-examples-for-sam-a5d2-family--v301"
  },"208": {
    "doc": "Release notes",
    "title": "Harmony 3 driver and system service application examples for SAM A5D2 family  v3.0.0",
    "content": "Development kit and demo application support . Following table provides number of peripheral library examples available for different development kits. | Development Kits | MPLABx applications | IAR applications | . | SAMA5D27-SOM1-EK1 | 4 | 0 | . | SAMA5D2 Xplained Ultra Evaluation Kit | 37 | 36 | . New Features . New features added in this release are as follows: . | Applications migrated from csp repository to this new application repository for SAM A5D2 development boards | . Known Issues . The current known issues are as follows: . | None | . Development Tools . | MPLAB® X IDE v5.40 | MPLAB® X IDE plug-ins: . | MPLAB® Harmony Configurator (MHC) v3.6.0 | . | MPLAB® XC32 C/C++ Compiler v2.41 | IAR Embedded workbench for ARM v8.50 or above | . ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/release_notes.html#harmony-3-driver-and-system-service-application-examples-for-sam-a5d2-family--v300",
    "relUrl": "/release_notes.html#harmony-3-driver-and-system-service-application-examples-for-sam-a5d2-family--v300"
  },"209": {
    "doc": "Release notes",
    "title": "Release notes",
    "content": ". ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/release_notes.html",
    "relUrl": "/release_notes.html"
  },"210": {
    "doc": "Harmony 3 driver and system service application examples for SAM A5D2 family",
    "title": "Harmony 3 driver and system service application examples for SAM A5D2 family",
    "content": "[![MCHP](https://www.microchip.com/ResourcePackages/Microchip/assets/dist/images/logo.png)](https://www.microchip.com) # Harmony 3 driver and system service application examples for SAM A5D2 family MPLAB® Harmony 3 is an extension of the MPLAB® ecosystem for creating embedded firmware solutions for Microchip 32-bit SAM and PIC® microcontroller and microprocessor devices. Refer to the following links for more information. - [Microchip 32-bit MCUs](https://www.microchip.com/design-centers/32-bit) - [Microchip 32-bit MPUs](https://www.microchip.com/design-centers/32-bit-mpus) - [Microchip MPLAB X IDE](https://www.microchip.com/mplab/mplab-x-ide) - [Microchip MPLAB® Harmony](https://www.microchip.com/mplab/mplab-harmony) - [Microchip MPLAB® Harmony Pages](https://microchip-mplab-harmony.github.io/) This repository contains the MPLAB® Harmony 3 driver and system service application examples for SAM A5D2 family - [Release Notes](/core_apps_sam_a5d2/release_notes.html) - [MPLAB® Harmony License](/core_apps_sam_a5d2/mplab_harmony_license.html) To clone or download these applications from Github, go to the [main page of this repository](https://github.com/Microchip-MPLAB-Harmony/core_apps_sam_a5d2) and then click **Clone** button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these [instructions](https://github.com/Microchip-MPLAB-Harmony/contentmanager/wiki). ## Contents Summary | Folder | Description | --- | --- | apps | Contains driver and system service example applications | docs | Contains documentation in html format for offline viewing (to be used only after cloning this repository onto a local machine). Use [github pages](https://microchip-mplab-harmony.github.io/core_apps_sam_a5d2/) of this repository for viewing it online. | ## Code Examples The following applications are provided to demonstrate the typical or interesting usage models of one or more peripheral libraries. | Name | Description | ---- | ----------- | [I2C driver asynchronous - I2C EEPROM](/core_apps_sam_a5d2/apps/driver/i2c/async/i2c_eeprom/readme.html) | This example application shows how to use the I2C driver in asynchronous mode to perform operations on the EEPROM | [I2C driver synchronous - I2C EEPROM](/core_apps_sam_a5d2/apps/driver/i2c/sync/i2c_eeprom/readme.html) | This example application shows how to use the I2C driver in synchronous mode to perform operations on the EEPROM | [I2C EEPROM AT24 driver - EEPROM Read Write](/core_apps_sam_a5d2/apps/driver/i2c_eeprom/at24/at24_eeprom_read_write/readme.html) | This example application shows how to use the AT24 driver to perform read and write operations on AT24 series of EEPROM | [Memory driver asynchronous - MX25L QSPI and AT25DF SPI flash read write](/core_apps_sam_a5d2/apps/driver/memory/async/mx25l_at25df_read_write/readme.html) | This example application shows how to use the Memory driver in asynchronous mode to perform block operations on the MX25L QSPI flash and the AT25DF SPI flash media | [Memory driver synchronous - MX25L QSPI and AT25DF SPI flash read write](/core_apps_sam_a5d2/apps/driver/memory/sync/mx25l_at25df_read_write/readme.html) | This example application shows how to use the Memory driver in synchronous mode to perform block operations on the MX25L QSPI flash and the AT25DF SPI flash media | [SDMMC driver asynchronous - SDMMC Read Write](/core_apps_sam_a5d2/apps/driver/sdmmc/async/sdmmc_read_write/readme.html) | This example application shows how to use the SDMMC driver in asynchronous mode to perform block operations on the SD Card Media | [SDSPI driver asynchronous - SDSPI Read Write](/core_apps_sam_a5d2/apps/driver/sdspi/async/sdspi_read_write/readme.html) | This example application shows how to use the SDSPI driver in asynchronous mode to perform block operations on the SD Card Media | [SDSPI driver synchronous - SDSPI Read Write](/core_apps_sam_a5d2/apps/driver/sdspi/sync/sdspi_read_write/readme.html) | This example application shows how to use the SDSPI driver in synchronous mode to perform block operations on the SD Card Media | [SPI Driver asynchronous - multi client](/core_apps_sam_a5d2/apps/driver/spi/async/spi_multi_slave/readme.html) | This example demonstrates how to use single instance of the SPI driver in asynchronous mode to communicate with multiple EEPROMs | [SPI Driver asynchronous - Self loopback multi client](/core_apps_sam_a5d2/apps/driver/spi/async/spi_self_loopback_multi_client/readme.html) | This example demonstrates how to use the SPI driver in asynchronous mode to achieve self-loop back between multiple clients | [SPI Driver synchronous - multi client](/core_apps_sam_a5d2/apps/driver/spi/sync/spi_multi_slave/readme.html) | This example demonstrates how to use single instance of the SPI driver in synchronous mode to communicate with multiple EEPROMs in an RTOS environment | [SPI Driver synchronous - Self loopback multi client](/core_apps_sam_a5d2/apps/driver/spi/sync/spi_self_loopback_multi_client/readme.html) | This example demonstrates how to use the SPI driver in synchronous mode to achieve self-loop back between multiple clients in RTOS environment | [SPI EEPROM AT25 driver - EEPROM Read Write](/core_apps_sam_a5d2/apps/driver/spi_eeprom/at25/at25_eeprom_read_write/readme.html) | This example application shows how to use the AT25 driver to perform read and write operations on AT25 series of EEPROM | [SPI Flash AT25DF - AT25DF flash read write](/core_apps_sam_a5d2/apps/driver/spi_flash/at25df/at25df_flash_read_write/readme.html) | This example application shows how to use the AT25DF SPI flash driver to perform block operations on the on-board AT25DF Flash memory | [SQI flash MX25L driver - MX25L SQI read write](/core_apps_sam_a5d2/apps/driver/sqi_flash/mx25l/mx25l_flash_read_write/readme.html) | This example application shows how to use the MX25L QSPI flash driver to perform block operations on the on-board MX25L QSPI Flash memory | [USART driver asynchronous - USART echo](/core_apps_sam_a5d2/apps/driver/usart/async/usart_echo/readme.html) | This example echoes the received characters over the console using the USART driver in asynchronous mode | [USART driver asynchronous - USART multi instance](/core_apps_sam_a5d2/apps/driver/usart/async/usart_multi_instance/readme.html) | This example echoes the received characters over the two consoles using the USART driver in asynchronous mode | [USART driver synchronous - USART echo](/core_apps_sam_a5d2/apps/driver/usart/sync/usart_echo/readme.html) | This example echoes the received characters over the console using the USART driver in synchronous mode | [USART driver synchronous - USART multi instance](/core_apps_sam_a5d2/apps/driver/usart/sync/usart_multi_instance/readme.html) | This example echoes the received characters over the two consoles using the USART driver in synchronous mode | [FAT filesystem throughput using eMMC Media](/core_apps_sam_a5d2/apps/fs/emmc_fat_throughput/readme.html) | This application calculates throughput by Writing and Reading data into a eMMC device at High Speed using the MPLAB Harmony File System and the SDMMC driver | [FAT filesystem using EMMC media](/core_apps_sam_a5d2/apps/fs/emmc_sdmmc_fat_multi_disk/readme.html) | This application shows an example of using the FAT filesystem to access and modify the contents of a eMMC device using contents from SD card | [FAT filesystem using SDMMC Media](/core_apps_sam_a5d2/apps/fs/sdmmc_fat/readme.html) | This application shows an example of using the MPLAB Harmony File System to access and modify the contents of a SD card using the SDMMC driver | [FAT filesystem throughput using SDMMC Media](/core_apps_sam_a5d2/apps/fs/sdmmc_fat_throughput/readme.html) | This application calculates throughput by Writing and Reading data into a Sd-Card at High Speed using the MPLAB Harmony File System and the SDMMC driver | [FAT filesystem using SPI flash media](/core_apps_sam_a5d2/apps/fs/spi_flash_fat/readme.html) | This application shows an example of using the MPLAB Harmony File System to access and modify the contents of a flash memory using SPI Flash driver | [FAT filesystem using MX25L Media](/core_apps_sam_a5d2/apps/fs/sqi_flash_fat/readme.html) | This application shows an example of using the MPLAB Harmony File System to access SQI based MX25L flash media | [FreeRTOS basic](/core_apps_sam_a5d2/apps/rtos/freertos/basic_freertos/readme.html) | This example application demonstrates context switching between four tasks of different priorites. Two tasks run periodically while the other two tasks are event driven | [FreeRTOS Task Notification](/core_apps_sam_a5d2/apps/rtos/freertos/task_notification_freertos/readme.html) | This example application is to illustrate the FreeRTOS Task Notification feature which is used as a light weight binary semaphore | [Time System Service multi-client](/core_apps_sam_a5d2/apps/system/time/sys_time_multiclient/readme.html) | This example application demonstrates the multi-client system timer functionality | ____ [![License](https://img.shields.io/badge/license-Harmony%20license-orange.svg)](https://github.com/Microchip-MPLAB-Harmony/core_apps_sam_a5d2/blob/master/mplab_harmony_license.md) [![Latest release](https://img.shields.io/github/release/Microchip-MPLAB-Harmony/core_apps_sam_a5d2.svg)](https://github.com/Microchip-MPLAB-Harmony/core_apps_sam_a5d2/releases/latest) [![Latest release date](https://img.shields.io/github/release-date/Microchip-MPLAB-Harmony/core_apps_sam_a5d2.svg)](https://github.com/Microchip-MPLAB-Harmony/core_apps_sam_a5d2/releases/latest) [![Commit activity](https://img.shields.io/github/commit-activity/y/Microchip-MPLAB-Harmony/core_apps_sam_a5d2.svg)](https://github.com/Microchip-MPLAB-Harmony/core_apps_sam_a5d2/graphs/commit-activity) [![Contributors](https://img.shields.io/github/contributors-anon/Microchip-MPLAB-Harmony/core_apps_sam_a5d2.svg)]() ____ [![Follow us on Youtube](https://img.shields.io/badge/Youtube-Follow%20us%20on%20Youtube-red.svg)](https://www.youtube.com/user/MicrochipTechnology) [![Follow us on LinkedIn](https://img.shields.io/badge/LinkedIn-Follow%20us%20on%20LinkedIn-blue.svg)](https://www.linkedin.com/company/microchip-technology) [![Follow us on Facebook](https://img.shields.io/badge/Facebook-Follow%20us%20on%20Facebook-blue.svg)](https://www.facebook.com/microchiptechnology/) [![Follow us on Twitter](https://img.shields.io/twitter/follow/MicrochipTech.svg?style=social)](https://twitter.com/MicrochipTech) [![](https://img.shields.io/github/stars/Microchip-MPLAB-Harmony/core_apps_sam_a5d2.svg?style=social)]() [![](https://img.shields.io/github/watchers/Microchip-MPLAB-Harmony/core_apps_sam_a5d2.svg?style=social)]() ",
    "url": "http://localhost:4000/core_apps_sam_a5d2/",
    "relUrl": "/"
  }
}
